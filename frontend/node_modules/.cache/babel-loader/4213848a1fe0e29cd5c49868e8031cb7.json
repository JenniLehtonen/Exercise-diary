{"ast":null,"code":"import axios from 'axios';\nimport { useContext } from 'react';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n\nconst getAllResults = async () => {\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/',\n    headers: {},\n    data: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst addWorkout = async newObject => {\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/id/',\n    headers: {},\n    data: newObject\n  }; //näihin kohtiin ;?\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst deleteWorkout = async workout => {\n  const config = {\n    method: 'delete',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {},\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst editWorkout = async workout => {\n  const config = {\n    method: 'patch',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {},\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getProfessionalsResults = async () => {\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/professionals/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getResultsByUser = async email => {\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/own-results/',\n    headers: {},\n    data: {\n      email\n    }\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n  /*await axios.post (`${baseUrlResults}/own-results/`, email)\r\n  .then(response =>{\r\n      return response.data;\r\n  }) .catch (error => {\r\n      if(error.response){\r\n          let customError = error.response;\r\n          customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\r\n          //setError(customError);\r\n          return error;\r\n      }\r\n  })*/\n};\n\nconst getAmateursResults = async () => {\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/amateurs/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst register = async (newObject, setError) => {\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    return response;\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Rekisteröityminen epäonnistui\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nconst login = async (newObject, setError, login, setEmail) => {\n  await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    login();\n    setEmail(newObject.email);\n\n    if (response.data.message === \"Logged in !\") {\n      return \"Login succeeded\";\n    } else {\n      return \"error\";\n    }\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nconst logout = (logout, setEmail) => {\n  logout();\n  setEmail(\" \");\n};\n\nexport { getAmateursResults, getProfessionalsResults, addWorkout, getAllResults, deleteWorkout, editWorkout, register, login, logout, getResultsByUser };","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","useContext","baseUrlUsers","baseUrlResults","getAllResults","config","method","url","headers","data","res","error","alert","addWorkout","newObject","deleteWorkout","workout","editWorkout","getProfessionalsResults","getResultsByUser","email","getAmateursResults","register","setError","post","then","response","catch","customError","userMessage","login","setEmail","message","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {useContext} from 'react';\r\n\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst getAllResults = async () => {\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/',\r\n        headers: {},\r\n        data: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst addWorkout = async (newObject) => {\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/id/',\r\n        headers: {},\r\n        data: newObject\r\n    }//näihin kohtiin ;?\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst deleteWorkout = async (workout) => {\r\n    const config = {\r\n        method: 'delete',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst editWorkout = async (workout) => {\r\n    const config = {\r\n        method: 'patch',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async () => {\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getResultsByUser = async (email) => {\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/own-results/',\r\n        headers: {},\r\n        data: {email}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n    /*await axios.post (`${baseUrlResults}/own-results/`, email)\r\n    .then(response =>{\r\n        return response.data;\r\n    }) .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\r\n            //setError(customError);\r\n            return error;\r\n        }\r\n    })*/\r\n}\r\n\r\nconst getAmateursResults = async () => {\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\n\r\nconst register = async (newObject, setError) =>{\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Rekisteröityminen epäonnistui\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setError, login, setEmail) => {\r\n    await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        login();\r\n        setEmail(newObject.email);\r\n        if (response.data.message===\"Logged in !\"){\r\n            return \"Login succeeded\";\r\n        } else {\r\n            return \"error\";\r\n        }\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nconst logout = (logout, setEmail) => {\r\n    logout();\r\n    setEmail(\" \");\r\n}\r\n\r\nexport {getAmateursResults, getProfessionalsResults, addWorkout, getAllResults, deleteWorkout, editWorkout, register, login, logout, getResultsByUser}\r\n"]},"metadata":{},"sourceType":"module"}