{"ast":null,"code":"import axios from 'axios';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n\nconst getAllResults = async () => {\n  //Kaikkien tulosten hakemiseen tietokannasta\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/',\n    headers: {},\n    data: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst addWorkout = async newObject => {\n  //Uuden treenin lisääminen\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/id/',\n    headers: {},\n    data: newObject\n  }; //näihin kohtiin ;?\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst deleteWorkout = async workout => {\n  //Treenin poistaminen\n  const config = {\n    method: 'delete',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {},\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst editWorkout = async (workout, token) => {\n  //Treenin muokkaaminen\n  console.log(workout);\n  const config = {\n    method: 'patch',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getProfessionalsResults = async token => {\n  //Haetaan ammattilaisten treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/professionals/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getResultsByUser = async (email, token) => {\n  //Haetaan kirjautuneen käyttäjän treenit\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/own-results/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: email\n  };\n\n  try {\n    let res = await axios(config);\n    console.log(res.data);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getAmateursResults = async () => {\n  //Haetaan harrastajien treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/amateurs/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst register = async (newObject, setError) => {\n  //Rekisteröidytään\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    return response;\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Rekisteröityminen epäonnistui\";\n      setError(customError);\n      return error;\n    }\n  });\n}; //OTA POIS VÄLISTÄ SETEMAIL JOS EI TARVI\n\n\nconst login = async (newObject, setError, login,\n/*setEmail,*/\nsetUsertype, setFirstname) => {\n  //Kirjaudutaan sisään\n  let res = await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    console.log(response);\n    login(response.data.token, response.data.email); //setEmail(newObject.email);\n\n    setUsertype(response.data.userType);\n    setFirstname(response.data.firstname);\n\n    if (response.data.message === \"Logged in !\") {\n      //TARVITAANKO TÄTÄ?\n      return res.data;\n    } else {\n      return \"error\";\n    }\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nconst logout = (logout, setEmail, setFirstname, setUsertype) => {\n  //Kirjaudutaan ulos\n  logout(); // setEmail(\" \");\n\n  setFirstname(\" \");\n  setUsertype(\" \");\n};\n\nexport { getAmateursResults, getProfessionalsResults, addWorkout, getAllResults, deleteWorkout, editWorkout, register, login, logout, getResultsByUser };","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","baseUrlUsers","baseUrlResults","getAllResults","config","method","url","headers","data","res","error","alert","addWorkout","newObject","deleteWorkout","workout","editWorkout","token","console","log","Authorization","getProfessionalsResults","getResultsByUser","email","getAmateursResults","register","setError","post","then","response","catch","customError","userMessage","login","setUsertype","setFirstname","userType","firstname","message","logout","setEmail"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,YAAY,GAAG,iCAArB;AACA,MAAMC,cAAc,GAAG,mCAAvB;;AAEA,MAAMC,aAAa,GAAG,YAAY;AAAG;AACjC,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAEJ,cAAc,GAAG,GAFX;AAGXK,IAAAA,OAAO,EAAE,EAHE;AAIXC,IAAAA,IAAI,EAAE;AAJK,GAAf;;AAMA,MAAI;AACA,QAAIC,GAAG,GAAG,MAAMT,KAAK,CAACI,MAAD,CAArB;AACA,WAAOK,GAAG,CAACD,IAAX;AACH,GAHD,CAGE,OAAOE,KAAP,EAAa;AACXC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAdD;;AAgBA,MAAME,UAAU,GAAG,MAAOC,SAAP,IAAqB;AAAE;AACtC,QAAMT,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,GAAG,EAAEJ,cAAc,GAAG,MAFX;AAGXK,IAAAA,OAAO,EAAE,EAHE;AAIXC,IAAAA,IAAI,EAAEK;AAJK,GAAf,CADoC,CAMnC;;AACD,MAAI;AACA,QAAIJ,GAAG,GAAG,MAAMT,KAAK,CAACI,MAAD,CAArB;AACA,WAAOK,GAAG,CAACD,IAAX;AACH,GAHD,CAGE,OAAOE,KAAP,EAAa;AACXC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAdD;;AAgBA,MAAMI,aAAa,GAAG,MAAOC,OAAP,IAAmB;AAAE;AACvC,QAAMX,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,QADG;AAEXC,IAAAA,GAAG,EAAEJ,cAAc,GAAG,GAAjB,GAAuBa,OAAvB,GAAiC,GAF3B;AAGXR,IAAAA,OAAO,EAAE,EAHE;AAIXC,IAAAA,IAAI,EAAEO;AAJK,GAAf;;AAMA,MAAI;AACA,QAAIN,GAAG,GAAG,MAAMT,KAAK,CAACI,MAAD,CAArB;AACA,WAAOK,GAAG,CAACD,IAAX;AACH,GAHD,CAGE,OAAOE,KAAP,EAAa;AACXC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAdD;;AAgBA,MAAMM,WAAW,GAAG,OAAOD,OAAP,EAAgBE,KAAhB,KAA0B;AAAE;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,QAAMX,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,OADG;AAEXC,IAAAA,GAAG,EAAEJ,cAAc,GAAG,GAAjB,GAAuBa,OAAvB,GAAiC,GAF3B;AAGXR,IAAAA,OAAO,EAAE;AAACa,MAAAA,aAAa,EAAE,YAAYH;AAA5B,KAHE;AAIXT,IAAAA,IAAI,EAAEO;AAJK,GAAf;;AAMA,MAAI;AACA,QAAIN,GAAG,GAAG,MAAMT,KAAK,CAACI,MAAD,CAArB;AACA,WAAOK,GAAG,CAACD,IAAX;AACH,GAHD,CAGE,OAAOE,KAAP,EAAa;AACXC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAfD;;AAiBA,MAAMW,uBAAuB,GAAG,MAAOJ,KAAP,IAAiB;AAAE;AAC/C,QAAMb,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAEJ,cAAc,GAAG,iBAFX;AAGXK,IAAAA,OAAO,EAAE;AAACa,MAAAA,aAAa,EAAE,YAAYH;AAA5B;AAHE,GAAf;;AAKA,MAAI;AACA,QAAIR,GAAG,GAAG,MAAMT,KAAK,CAACI,MAAD,CAArB;AACA,WAAOK,GAAG,CAACD,IAAX;AACH,GAHD,CAGE,OAAOE,KAAP,EAAa;AACXC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAbD;;AAeA,MAAMY,gBAAgB,GAAG,OAAOC,KAAP,EAAcN,KAAd,KAAwB;AAAE;AAC/C,QAAMb,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,GAAG,EAAEJ,cAAc,GAAG,eAFX;AAGXK,IAAAA,OAAO,EAAE;AAACa,MAAAA,aAAa,EAAE,YAAYH;AAA5B,KAHE;AAIXT,IAAAA,IAAI,EAAEe;AAJK,GAAf;;AAMA,MAAI;AAEA,QAAId,GAAG,GAAG,MAAMT,KAAK,CAACI,MAAD,CAArB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACD,IAAhB;AACA,WAAOC,GAAG,CAACD,IAAX;AACH,GALD,CAKE,OAAOE,KAAP,EAAa;AACXC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAhBD;;AAkBA,MAAMc,kBAAkB,GAAG,YAAY;AAAE;AACrC,QAAMpB,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAEJ,cAAc,GAAG,YAFX;AAGXK,IAAAA,OAAO,EAAE;AAHE,GAAf;;AAKA,MAAI;AACA,QAAIE,GAAG,GAAG,MAAMT,KAAK,CAACI,MAAD,CAArB;AACA,WAAOK,GAAG,CAACD,IAAX;AACH,GAHD,CAGE,OAAOE,KAAP,EAAa;AACXC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAbD;;AAgBA,MAAMe,QAAQ,GAAG,OAAOZ,SAAP,EAAkBa,QAAlB,KAA8B;AAAE;AAC7C,QAAM1B,KAAK,CAAC2B,IAAN,CAAY,GAAE1B,YAAa,YAA3B,EAAwCY,SAAxC,EACLe,IADK,CACAC,QAAQ,IAAI;AACd,WAAOA,QAAP;AACH,GAHK,EAILC,KAJK,CAIEpB,KAAK,IAAI;AACb,QAAGA,KAAK,CAACmB,QAAT,EAAkB;AACd,UAAIE,WAAW,GAAGrB,KAAK,CAACmB,QAAxB;AACAE,MAAAA,WAAW,CAACC,WAAZ,GAA0B,+BAA1B;AACAN,MAAAA,QAAQ,CAACK,WAAD,CAAR;AACA,aAAOrB,KAAP;AACH;AACJ,GAXK,CAAN;AAYH,CAbD,C,CAcgC;;;AAChC,MAAMuB,KAAK,GAAG,OAAOpB,SAAP,EAAkBa,QAAlB,EAA4BO,KAA5B;AAAmC;AAAcC,WAAjD,EAA8DC,YAA9D,KAA+E;AAAE;AAC3F,MAAI1B,GAAG,GAAG,MAAMT,KAAK,CAAC2B,IAAN,CAAa,GAAE1B,YAAa,SAA5B,EAAsCY,SAAtC,EACfe,IADe,CACVC,QAAQ,IAAG;AACbX,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ;AACAI,IAAAA,KAAK,CAACJ,QAAQ,CAACrB,IAAT,CAAcS,KAAf,EAAsBY,QAAQ,CAACrB,IAAT,CAAce,KAApC,CAAL,CAFa,CAGb;;AACAW,IAAAA,WAAW,CAACL,QAAQ,CAACrB,IAAT,CAAc4B,QAAf,CAAX;AACAD,IAAAA,YAAY,CAACN,QAAQ,CAACrB,IAAT,CAAc6B,SAAf,CAAZ;;AACA,QAAIR,QAAQ,CAACrB,IAAT,CAAc8B,OAAd,KAAwB,aAA5B,EAA0C;AAAE;AACxC,aAAO7B,GAAG,CAACD,IAAX;AACH,KAFD,MAEO;AACH,aAAO,OAAP;AACH;AACJ,GAZe,EAcfsB,KAde,CAcRpB,KAAK,IAAI;AACb,QAAGA,KAAK,CAACmB,QAAT,EAAkB;AACd,UAAIE,WAAW,GAAGrB,KAAK,CAACmB,QAAxB;AACAE,MAAAA,WAAW,CAACC,WAAZ,GAA0B,4EAA1B;AACAN,MAAAA,QAAQ,CAACK,WAAD,CAAR;AACA,aAAOrB,KAAP;AACH;AACJ,GArBe,CAAhB;AAsBH,CAvBD;;AAyBA,MAAM6B,MAAM,GAAG,CAACA,MAAD,EAASC,QAAT,EAAmBL,YAAnB,EAAiCD,WAAjC,KAAiD;AAAE;AAC9DK,EAAAA,MAAM,GADsD,CAE7D;;AACCJ,EAAAA,YAAY,CAAC,GAAD,CAAZ;AACAD,EAAAA,WAAW,CAAC,GAAD,CAAX;AACH,CALD;;AAOA,SAAQV,kBAAR,EAA4BH,uBAA5B,EAAqDT,UAArD,EAAiET,aAAjE,EAAgFW,aAAhF,EAA+FE,WAA/F,EAA4GS,QAA5G,EAAsHQ,KAAtH,EAA6HM,MAA7H,EAAqIjB,gBAArI","sourcesContent":["import axios from 'axios';\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst getAllResults = async () => {  //Kaikkien tulosten hakemiseen tietokannasta\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/',\r\n        headers: {},\r\n        data: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst addWorkout = async (newObject) => { //Uuden treenin lisääminen\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/id/',\r\n        headers: {},\r\n        data: newObject\r\n    }//näihin kohtiin ;?\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst deleteWorkout = async (workout) => { //Treenin poistaminen\r\n    const config = {\r\n        method: 'delete',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst editWorkout = async (workout, token) => { //Treenin muokkaaminen\r\n    console.log(workout);\r\n    const config = {\r\n        method: 'patch',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async (token) => { //Haetaan ammattilaisten treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {Authorization: 'Bearer ' + token}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getResultsByUser = async (email, token) => { //Haetaan kirjautuneen käyttäjän treenit\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/own-results/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: email\r\n    }\r\n    try {\r\n        \r\n        let res = await axios(config);\r\n        console.log(res.data);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n}\r\n\r\nconst getAmateursResults = async () => { //Haetaan harrastajien treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\n\r\nconst register = async (newObject, setError) =>{ //Rekisteröidytään\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Rekisteröityminen epäonnistui\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n                                //OTA POIS VÄLISTÄ SETEMAIL JOS EI TARVI\r\nconst login = async (newObject, setError, login, /*setEmail,*/ setUsertype, setFirstname) => { //Kirjaudutaan sisään\r\n    let res = await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        console.log(response);\r\n        login(response.data.token, response.data.email);\r\n        //setEmail(newObject.email);\r\n        setUsertype(response.data.userType);\r\n        setFirstname(response.data.firstname);\r\n        if (response.data.message===\"Logged in !\"){ //TARVITAANKO TÄTÄ?\r\n            return res.data;\r\n        } else {\r\n            return \"error\";\r\n        }\r\n    }\r\n    )\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nconst logout = (logout, setEmail, setFirstname, setUsertype) => { //Kirjaudutaan ulos\r\n    logout();\r\n   // setEmail(\" \");\r\n    setFirstname(\" \");\r\n    setUsertype(\" \");\r\n}\r\n\r\nexport {getAmateursResults, getProfessionalsResults, addWorkout, getAllResults, deleteWorkout, editWorkout, register, login, logout, getResultsByUser}\r\n"]},"metadata":{},"sourceType":"module"}