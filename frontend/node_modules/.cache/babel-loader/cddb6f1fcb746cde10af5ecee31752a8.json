{"ast":null,"code":"import axios from 'axios';\nimport UserContext from '../../contexts/UserContext';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n\nconst addWorkout = async (newObject, token) => {\n  //Uuden treenin lisääminen\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/id/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: newObject\n  }; //näihin kohtiin ;?\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    console.log(\"VIRHE\");\n    alert(error);\n    return error;\n  }\n\n  ;\n};\n\nconst deleteWorkout = async (workout, token) => {\n  //Treenin poistaminen\n  const config = {\n    method: 'delete',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst editWorkout = async (workout, token) => {\n  //Treenin muokkaaminen\n  console.log(workout);\n  const config = {\n    method: 'patch',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getProfessionalsResults = async token => {\n  //Haetaan ammattilaisten treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/professionals/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getResultsByUser = async (email, token) => {\n  //Haetaan kirjautuneen käyttäjän treenit\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/own-results/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: email\n  };\n\n  try {\n    let res = await axios(config);\n    console.log(res.data);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getAmateursResults = async () => {\n  //Haetaan harrastajien treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/amateurs/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst register = async (newObject, setError) => {\n  //Rekisteröidytään\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    return response;\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Rekisteröityminen epäonnistui\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nconst login = async (newObject, setError, login) => {\n  //Kirjaudutaan sisään\n  let res = await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    console.log(response);\n    login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nconst logout = logout => {\n  //Kirjaudutaan ulos\n  logout();\n};\n\nexport { getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser };","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","UserContext","baseUrlUsers","baseUrlResults","addWorkout","newObject","token","config","method","url","headers","Authorization","data","res","error","console","log","alert","deleteWorkout","workout","editWorkout","getProfessionalsResults","getResultsByUser","email","getAmateursResults","register","setError","post","then","response","catch","customError","userMessage","login","firstname","userType","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport UserContext from '../../contexts/UserContext';\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst addWorkout = async (newObject, token) => { //Uuden treenin lisääminen\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/id/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: newObject\r\n    }//näihin kohtiin ;?\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n            console.log(\"VIRHE\");\r\n        alert(error);\r\n        return error;\r\n    };\r\n};\r\n\r\nconst deleteWorkout = async (workout, token) => { //Treenin poistaminen\r\n    const config = {\r\n        method: 'delete',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst editWorkout = async (workout, token) => { //Treenin muokkaaminen\r\n    console.log(workout);\r\n    const config = {\r\n        method: 'patch',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async (token) => { //Haetaan ammattilaisten treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {Authorization: 'Bearer ' + token}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getResultsByUser = async (email, token) => { //Haetaan kirjautuneen käyttäjän treenit\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/own-results/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: email\r\n    }\r\n    try {\r\n        \r\n        let res = await axios(config);\r\n        console.log(res.data);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n}\r\n\r\nconst getAmateursResults = async () => { //Haetaan harrastajien treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\n\r\nconst register = async (newObject, setError) =>{ //Rekisteröidytään\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Rekisteröityminen epäonnistui\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setError, login) => { //Kirjaudutaan sisään\r\n    let res = await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        console.log(response);\r\n        login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\r\n    }\r\n    )\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nconst logout = (logout) => { //Kirjaudutaan ulos\r\n    logout();\r\n}\r\n\r\nexport {getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser}\r\n"]},"metadata":{},"sourceType":"module"}