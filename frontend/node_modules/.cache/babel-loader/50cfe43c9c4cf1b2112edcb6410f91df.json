{"ast":null,"code":"import axios from 'axios';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n\nconst addWorkout = async (newObject, token, setAppError, setSuccess) => {\n  //Uuden treenin lisääminen\n  console.log(newObject.token);\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/id/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: newObject\n  }; //näihin kohtiin ;?\n\n  let user = parseJwt(token, newObject.person); //Lähetetään metodille token ja userContextissa oleva kirjautuneen henkilön sähköpostiosoite\n\n  if (user === true) {\n    try {\n      let res = await axios(config);\n      setSuccess(true);\n      return res.data;\n    } catch (error) {\n      setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\n      return;\n    }\n\n    ;\n  } else {\n    setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\n    return;\n  }\n};\n\nconst deleteWorkout = async (workout, token, setAppError, setSuccess) => {\n  //Treenin poistaminen\n  const config = {\n    method: 'delete',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    setSuccess(true);\n    return res.data;\n  } catch (error) {\n    setAppError(\"Virhe treenin poistamisessa, yritä uudelleen!\");\n    return;\n  }\n\n  ;\n};\n\nconst editWorkout = async (workout, token, setAppError, setSuccess) => {\n  //Treenin muokkaaminen\n  console.log(workout);\n  const config = {\n    method: 'patch',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    setAppError(null);\n    setSuccess(true);\n    return res.data;\n  } catch (error) {\n    setAppError(\"Virhe treenin muokkaamisessa, yritä uudelleen!\");\n    return;\n  }\n\n  ;\n};\n\nconst getProfessionalsResults = async token => {\n  //Haetaan ammattilaisten treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/professionals/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getResultsByUser = async (email, token) => {\n  //Haetaan kirjautuneen käyttäjän treenit\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/own-results/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: email\n  };\n\n  try {\n    let res = await axios(config);\n    console.log(res.data);\n    return res.data;\n  } catch (error) {\n    //alert(error);\n    console.log(\"User has no excercises yet\");\n    return;\n  }\n\n  ;\n};\n\nconst getAmateursResults = async () => {\n  //Haetaan harrastajien treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/amateurs/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst register = async (newObject, setAppError, setSuccess) => {\n  //Rekisteröidytään\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    setSuccess(true);\n    return response;\n  }).catch(error => {\n    setAppError(\"Rekisteröityminen epäonnistui, yritä uudelleen!\");\n    return \"virhe\";\n  });\n};\n\nconst login = async (newObject, setAppError, login) => {\n  //Kirjaudutaan sisään\n  let res = await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    console.log(response);\n    login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\n  }).catch(error => {\n    setAppError(\"Sisäänkirjautuminen epäonnistui, yritä uudelleen!\");\n    return \"virhe\";\n  });\n};\n\nconst logout = logout => {\n  //Kirjaudutaan ulos\n  logout();\n};\n\nexport { getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser };","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","baseUrlUsers","baseUrlResults","addWorkout","newObject","token","setAppError","setSuccess","console","log","config","method","url","headers","Authorization","data","user","parseJwt","person","res","error","deleteWorkout","workout","editWorkout","getProfessionalsResults","alert","getResultsByUser","email","getAmateursResults","register","post","then","response","catch","login","firstname","userType","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,YAAY,GAAG,iCAArB;AACA,MAAMC,cAAc,GAAG,mCAAvB;;AAEA,MAAMC,UAAU,GAAG,OAAOC,SAAP,EAAkBC,KAAlB,EAAyBC,WAAzB,EAAsCC,UAAtC,KAAqD;AAAE;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAYL,SAAS,CAACC,KAAtB;AACA,QAAMK,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,GAAG,EAAEV,cAAc,GAAG,MAFX;AAGXW,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYT;AAA5B,KAHE;AAIXU,IAAAA,IAAI,EAAEX;AAJK,GAAf,CAFoE,CAOnE;;AAED,MAAIY,IAAI,GAAGC,QAAQ,CAACZ,KAAD,EAAQD,SAAS,CAACc,MAAlB,CAAnB,CAToE,CAStB;;AAC9C,MAAGF,IAAI,KAAG,IAAV,EAAe;AACX,QAAI;AACA,UAAIG,GAAG,GAAG,MAAMnB,KAAK,CAACU,MAAD,CAArB;AACAH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,aAAOY,GAAG,CAACJ,IAAX;AACH,KAJD,CAIE,OAAOK,KAAP,EAAa;AACXd,MAAAA,WAAW,CAAC,8CAAD,CAAX;AACA;AACH;;AAAA;AACJ,GATD,MASO;AACHA,IAAAA,WAAW,CAAC,8CAAD,CAAX;AACA;AACH;AAEJ,CAxBD;;AA0BA,MAAMe,aAAa,GAAG,OAAOC,OAAP,EAAgBjB,KAAhB,EAAuBC,WAAvB,EAAoCC,UAApC,KAAmD;AAAE;AACvE,QAAMG,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,QADG;AAEXC,IAAAA,GAAG,EAAEV,cAAc,GAAG,GAAjB,GAAuBoB,OAAvB,GAAiC,GAF3B;AAGXT,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYT;AAA5B,KAHE;AAIXU,IAAAA,IAAI,EAAEO;AAJK,GAAf;;AAMA,MAAI;AACA,QAAIH,GAAG,GAAG,MAAMnB,KAAK,CAACU,MAAD,CAArB;AACAH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,WAAOY,GAAG,CAACJ,IAAX;AACH,GAJD,CAIE,OAAOK,KAAP,EAAa;AACXd,IAAAA,WAAW,CAAC,+CAAD,CAAX;AACA;AACH;;AAAA;AACJ,CAfD;;AAiBA,MAAMiB,WAAW,GAAG,OAAOD,OAAP,EAAgBjB,KAAhB,EAAuBC,WAAvB,EAAoCC,UAApC,KAAmD;AAAE;AACrEC,EAAAA,OAAO,CAACC,GAAR,CAAYa,OAAZ;AACA,QAAMZ,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,OADG;AAEXC,IAAAA,GAAG,EAAEV,cAAc,GAAG,GAAjB,GAAuBoB,OAAvB,GAAiC,GAF3B;AAGXT,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYT;AAA5B,KAHE;AAIXU,IAAAA,IAAI,EAAEO;AAJK,GAAf;;AAMA,MAAI;AACA,QAAIH,GAAG,GAAG,MAAMnB,KAAK,CAACU,MAAD,CAArB;AACAJ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,WAAOY,GAAG,CAACJ,IAAX;AACH,GALD,CAKE,OAAOK,KAAP,EAAa;AACXd,IAAAA,WAAW,CAAC,gDAAD,CAAX;AACA;AACH;;AAAA;AACJ,CAjBD;;AAmBA,MAAMkB,uBAAuB,GAAG,MAAOnB,KAAP,IAAiB;AAAE;AAC/C,QAAMK,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAEV,cAAc,GAAG,iBAFX;AAGXW,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYT;AAA5B;AAHE,GAAf;;AAKA,MAAI;AACA,QAAIc,GAAG,GAAG,MAAMnB,KAAK,CAACU,MAAD,CAArB;AACA,WAAOS,GAAG,CAACJ,IAAX;AACH,GAHD,CAGE,OAAOK,KAAP,EAAa;AACXK,IAAAA,KAAK,CAACL,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAbD;;AAeA,MAAMM,gBAAgB,GAAG,OAAOC,KAAP,EAActB,KAAd,KAAwB;AAAE;AAC/C,QAAMK,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,GAAG,EAAEV,cAAc,GAAG,eAFX;AAGXW,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAE,YAAYT;AAA5B,KAHE;AAIXU,IAAAA,IAAI,EAAEY;AAJK,GAAf;;AAMA,MAAI;AAEA,QAAIR,GAAG,GAAG,MAAMnB,KAAK,CAACU,MAAD,CAArB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYU,GAAG,CAACJ,IAAhB;AACA,WAAOI,GAAG,CAACJ,IAAX;AACH,GALD,CAKE,OAAOK,KAAP,EAAa;AACX;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA;AACH;;AAAA;AACJ,CAjBD;;AAmBA,MAAMmB,kBAAkB,GAAG,YAAY;AAAE;AACrC,QAAMlB,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAEV,cAAc,GAAG,YAFX;AAGXW,IAAAA,OAAO,EAAE;AAHE,GAAf;;AAKA,MAAI;AACA,QAAIM,GAAG,GAAG,MAAMnB,KAAK,CAACU,MAAD,CAArB;AACA,WAAOS,GAAG,CAACJ,IAAX;AACH,GAHD,CAGE,OAAOK,KAAP,EAAa;AACXK,IAAAA,KAAK,CAACL,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAbD;;AAgBA,MAAMS,QAAQ,GAAG,OAAOzB,SAAP,EAAkBE,WAAlB,EAA+BC,UAA/B,KAA6C;AAAE;AAC5D,QAAMP,KAAK,CAAC8B,IAAN,CAAY,GAAE7B,YAAa,YAA3B,EAAwCG,SAAxC,EACL2B,IADK,CACAC,QAAQ,IAAI;AACdzB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,WAAOyB,QAAP;AACH,GAJK,EAKLC,KALK,CAKEb,KAAK,IAAI;AACTd,IAAAA,WAAW,CAAC,iDAAD,CAAX;AACA,WAAO,OAAP;AACP,GARK,CAAN;AASH,CAVD;;AAYA,MAAM4B,KAAK,GAAG,OAAO9B,SAAP,EAAkBE,WAAlB,EAA+B4B,KAA/B,KAAyC;AAAE;AACrD,MAAIf,GAAG,GAAG,MAAMnB,KAAK,CAAC8B,IAAN,CAAa,GAAE7B,YAAa,SAA5B,EAAsCG,SAAtC,EACf2B,IADe,CACVC,QAAQ,IAAG;AACbxB,IAAAA,OAAO,CAACC,GAAR,CAAYuB,QAAZ;AACAE,IAAAA,KAAK,CAACF,QAAQ,CAACjB,IAAT,CAAcV,KAAf,EAAsB2B,QAAQ,CAACjB,IAAT,CAAcY,KAApC,EAA2CK,QAAQ,CAACjB,IAAT,CAAcoB,SAAzD,EAAoEH,QAAQ,CAACjB,IAAT,CAAcqB,QAAlF,CAAL;AACH,GAJe,EAKfH,KALe,CAKRb,KAAK,IAAI;AACbd,IAAAA,WAAW,CAAC,mDAAD,CAAX;AACA,WAAO,OAAP;AACH,GARe,CAAhB;AASH,CAVD;;AAYA,MAAM+B,MAAM,GAAIA,MAAD,IAAY;AAAE;AACzBA,EAAAA,MAAM;AACT,CAFD;;AAIA,SAAQT,kBAAR,EAA4BJ,uBAA5B,EAAqDrB,UAArD,EAAiEkB,aAAjE,EAAgFE,WAAhF,EAA6FM,QAA7F,EAAuGK,KAAvG,EAA8GG,MAA9G,EAAsHX,gBAAtH","sourcesContent":["import axios from 'axios';\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst addWorkout = async (newObject, token, setAppError, setSuccess) => { //Uuden treenin lisääminen\r\n    console.log(newObject.token);\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/id/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: newObject\r\n    }//näihin kohtiin ;?\r\n    \r\n    let user = parseJwt(token, newObject.person); //Lähetetään metodille token ja userContextissa oleva kirjautuneen henkilön sähköpostiosoite\r\n    if(user===true){\r\n        try {\r\n            let res = await axios(config);\r\n            setSuccess(true);\r\n            return res.data;\r\n        } catch (error){\r\n            setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\r\n            return;\r\n        };\r\n    } else {\r\n        setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\r\n        return;\r\n    }\r\n\r\n};\r\n\r\nconst deleteWorkout = async (workout, token, setAppError, setSuccess) => { //Treenin poistaminen\r\n    const config = {\r\n        method: 'delete',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        setSuccess(true);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin poistamisessa, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst editWorkout = async (workout, token, setAppError, setSuccess) => { //Treenin muokkaaminen\r\n    console.log(workout);\r\n    const config = {\r\n        method: 'patch',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        setAppError(null);\r\n        setSuccess(true);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin muokkaamisessa, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async (token) => { //Haetaan ammattilaisten treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {Authorization: 'Bearer ' + token}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getResultsByUser = async (email, token) => { //Haetaan kirjautuneen käyttäjän treenit\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/own-results/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: email\r\n    }\r\n    try {\r\n        \r\n        let res = await axios(config);\r\n        console.log(res.data);\r\n        return res.data;\r\n    } catch (error){\r\n        //alert(error);\r\n        console.log(\"User has no excercises yet\");\r\n        return;\r\n    };\r\n}\r\n\r\nconst getAmateursResults = async () => { //Haetaan harrastajien treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\n\r\nconst register = async (newObject, setAppError, setSuccess) =>{ //Rekisteröidytään\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        setSuccess(true);\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n            setAppError(\"Rekisteröityminen epäonnistui, yritä uudelleen!\");\r\n            return \"virhe\";\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setAppError, login) => { //Kirjaudutaan sisään\r\n    let res = await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        console.log(response);\r\n        login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\r\n    })\r\n    .catch (error => {\r\n        setAppError(\"Sisäänkirjautuminen epäonnistui, yritä uudelleen!\");\r\n        return \"virhe\";\r\n    })\r\n}\r\n\r\nconst logout = (logout) => { //Kirjaudutaan ulos\r\n    logout();\r\n}\r\n\r\nexport {getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser}\r\n"]},"metadata":{},"sourceType":"module"}