{"ast":null,"code":"import axios from 'axios';\nimport { useContext } from 'react';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n\nconst getAllResults = async () => {\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/',\n    headers: {},\n    data: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst addWorkout = async newObject => {\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/id/',\n    headers: {},\n    data: newObject\n  }; //näihin kohtiin ;?\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst deleteWorkout = async workout => {\n  const config = {\n    method: 'delete',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {},\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst editWorkout = async workout => {\n  const config = {\n    method: 'patch',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {},\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getProfessionalsResults = async () => {\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/professionals/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getAmateursResults = async () => {\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/amateurs/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst register = async (newObject\n/*setError*/\n) => {\n  //MIKÄ SETERROR?\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    return response;\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Rekisteröityminen epäonnistui\"; //setError(customError);\n\n      return error;\n    }\n  });\n};\n\nconst login = async (newObject, setError, login, setUID) => {\n  await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    login();\n    setUID(newObject.uid);\n    return response;\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nexport { getAmateursResults, getProfessionalsResults, addWorkout, getAllResults, deleteWorkout, editWorkout, register };","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","useContext","baseUrlUsers","baseUrlResults","getAllResults","config","method","url","headers","data","res","error","alert","addWorkout","newObject","deleteWorkout","workout","editWorkout","getProfessionalsResults","getAmateursResults","register","post","then","response","catch","customError","userMessage","login","setError","setUID","uid"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {useContext} from 'react';\r\n\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst getAllResults = async () => {\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/',\r\n        headers: {},\r\n        data: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst addWorkout = async (newObject) => {\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/id/',\r\n        headers: {},\r\n        data: newObject\r\n    }//näihin kohtiin ;?\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst deleteWorkout = async (workout) => {\r\n    const config = {\r\n        method: 'delete',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst editWorkout = async (workout) => {\r\n    const config = {\r\n        method: 'patch',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async () => {\r\n    \r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getAmateursResults = async () => {\r\n    \r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\n\r\nconst register = async (newObject, /*setError*/) =>{ //MIKÄ SETERROR?\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Rekisteröityminen epäonnistui\";\r\n            //setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setError, login, setUID) => {\r\n    await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        login();\r\n        setUID(newObject.uid);\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nexport {getAmateursResults, getProfessionalsResults, addWorkout, getAllResults, deleteWorkout, editWorkout, register}"]},"metadata":{},"sourceType":"module"}