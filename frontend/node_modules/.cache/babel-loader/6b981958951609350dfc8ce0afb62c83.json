{"ast":null,"code":"import axios from 'axios';\nimport { useContext } from 'react';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n\nconst getAll = async () => {\n  const config = {\n    method: 'get',\n    url: baseUrl,\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getProfessionalsResults = async person => {\n  const config = {\n    method: 'get',\n    url: baseUrlUsers + '/professionals/',\n    headers: {}\n  };\n};\n\nconst signup = async (newObject, setError) => {\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    return response;\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Rekisteröityminen epäonnistui\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nconst login = async (newObject, setError, login, setUID) => {\n  await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    login();\n    setUID(newObject.uid);\n    return response;\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\n      setError(customError);\n      return error;\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","useContext","baseUrlUsers","baseUrlResults","getAll","config","method","url","baseUrl","headers","res","data","error","alert","getProfessionalsResults","person","signup","newObject","setError","post","then","response","catch","customError","userMessage","login","setUID","uid"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,OAAzB;AAEA,MAAMC,YAAY,GAAG,iCAArB;AACA,MAAMC,cAAc,GAAG,mCAAvB;;AAEA,MAAMC,MAAM,GAAG,YAAY;AACvB,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAEC,OAFM;AAGXC,IAAAA,OAAO,EAAE;AAHE,GAAf;;AAKA,MAAI;AACA,QAAIC,GAAG,GAAG,MAAMV,KAAK,CAACK,MAAD,CAArB;AACA,WAAOK,GAAG,CAACC,IAAX;AACH,GAHD,CAGE,OAAOC,KAAP,EAAa;AACXC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAbD;;AAeA,MAAME,uBAAuB,GAAG,MAAOC,MAAP,IAAkB;AAC9C,QAAMV,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAEL,YAAY,GAAG,iBAFT;AAGXO,IAAAA,OAAO,EAAE;AAHE,GAAf;AAKH,CAND;;AAQA,MAAMO,MAAM,GAAG,OAAOC,SAAP,EAAkBC,QAAlB,KAA8B;AACzC,QAAMlB,KAAK,CAACmB,IAAN,CAAY,GAAEjB,YAAa,YAA3B,EAAwCe,SAAxC,EACLG,IADK,CACAC,QAAQ,IAAI;AACd,WAAOA,QAAP;AACH,GAHK,EAILC,KAJK,CAIEV,KAAK,IAAI;AACb,QAAGA,KAAK,CAACS,QAAT,EAAkB;AACd,UAAIE,WAAW,GAAGX,KAAK,CAACS,QAAxB;AACAE,MAAAA,WAAW,CAACC,WAAZ,GAA0B,+BAA1B;AACAN,MAAAA,QAAQ,CAACK,WAAD,CAAR;AACA,aAAOX,KAAP;AACH;AACJ,GAXK,CAAN;AAYH,CAbD;;AAeA,MAAMa,KAAK,GAAG,OAAOR,SAAP,EAAkBC,QAAlB,EAA4BO,KAA5B,EAAmCC,MAAnC,KAA8C;AACxD,QAAM1B,KAAK,CAACmB,IAAN,CAAa,GAAEjB,YAAa,SAA5B,EAAsCe,SAAtC,EACLG,IADK,CACAC,QAAQ,IAAG;AACbI,IAAAA,KAAK;AACLC,IAAAA,MAAM,CAACT,SAAS,CAACU,GAAX,CAAN;AACA,WAAON,QAAP;AACH,GALK,EAMLC,KANK,CAMEV,KAAK,IAAI;AACb,QAAGA,KAAK,CAACS,QAAT,EAAkB;AACd,UAAIE,WAAW,GAAGX,KAAK,CAACS,QAAxB;AACAE,MAAAA,WAAW,CAACC,WAAZ,GAA0B,4EAA1B;AACAN,MAAAA,QAAQ,CAACK,WAAD,CAAR;AACA,aAAOX,KAAP;AACH;AACJ,GAbK,CAAN;AAcH,CAfD","sourcesContent":["import axios from 'axios';\r\nimport {useContext} from 'react';\r\n\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst getAll = async () => {\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrl,\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async (person) => {\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlUsers + '/professionals/',\r\n        headers: {}\r\n    }\r\n};\r\n\r\nconst signup = async (newObject, setError) =>{\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Rekisteröityminen epäonnistui\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setError, login, setUID) => {\r\n    await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        login();\r\n        setUID(newObject.uid);\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}