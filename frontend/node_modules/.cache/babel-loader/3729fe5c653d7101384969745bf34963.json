{"ast":null,"code":"import axios from 'axios';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n\nconst parseJwt = (token, person) => {\n  //Otetaan tokeniin tallennetut tiedot\n  try {\n    var base64Url = token.split('.')[1];\n    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n    let payload = JSON.parse(jsonPayload);\n\n    if (payload.email == person) {\n      //Tarkistetaan, onko tokeniin tallennettu sähköpostiosoite sama kuin userContextissa oleva sähköpostiosoite\n      console.log(\"sama henkilö\");\n      return true;\n    } else {\n      console.log(\"eri henkilö\");\n      return false;\n    }\n  } catch (error) {\n    console.log(\"Error\");\n    return null;\n  }\n};\n\nconst addWorkout = async (newObject, token, setAppError, setSuccess) => {\n  //Uuden treenin lisääminen\n  console.log(newObject);\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/id/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: newObject\n  }; //näihin kohtiin ;?\n\n  let user = parseJwt(token, newObject.person); //Lähetetään metodille token ja userContextissa oleva kirjautuneen henkilön sähköpostiosoite\n\n  if (user === true) {\n    try {\n      let res = await axios(config);\n      setSuccess(true);\n      return res.data;\n    } catch (error) {\n      setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\n      return;\n    }\n\n    ;\n  } else {\n    setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\n    return;\n  }\n};\n\nconst deleteWorkout = async (workout, token, setAppError, setSuccess) => {\n  //Treenin poistaminen\n  const config = {\n    method: 'delete',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    setSuccess(true);\n    return res.data;\n  } catch (error) {\n    setAppError(\"Virhe treenin poistamisessa, yritä uudelleen!\");\n    return;\n  }\n\n  ;\n};\n\nconst editWorkout = async (workout, token, setAppError, setSuccess) => {\n  //Treenin muokkaaminen\n  console.log(workout);\n  const config = {\n    method: 'patch',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    setAppError(null);\n    setSuccess(true);\n    return res.data;\n  } catch (error) {\n    setAppError(\"Virhe treenin muokkaamisessa, yritä uudelleen!\");\n    return;\n  }\n\n  ;\n};\n\nconst getProfessionalsResults = async token => {\n  //Haetaan ammattilaisten treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/professionals/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getResultsByUser = async (email, token) => {\n  //Haetaan kirjautuneen käyttäjän treenit\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/own-results/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: email\n  };\n\n  try {\n    let res = await axios(config);\n    console.log(res.data);\n    return res.data;\n  } catch (error) {\n    //alert(error);\n    console.log(\"User has no excercises yet\");\n    return;\n  }\n\n  ;\n};\n\nconst getAmateursResults = async () => {\n  //Haetaan harrastajien treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/amateurs/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst register = async (newObject, setAppError, setSuccess) => {\n  //Rekisteröidytään\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    setSuccess(true);\n    return response;\n  }).catch(error => {\n    setAppError(\"Rekisteröityminen epäonnistui, yritä uudelleen!\");\n    return \"virhe\";\n  });\n};\n\nconst login = async (newObject, setAppError, login) => {\n  //Kirjaudutaan sisään\n  let res = await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    console.log(response);\n    login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\n  }).catch(error => {\n    setAppError(\"Sisäänkirjautuminen epäonnistui, yritä uudelleen!\");\n    return \"virhe\";\n  });\n};\n\nconst logout = logout => {\n  //Kirjaudutaan ulos\n  logout();\n};\n\nexport { getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser };","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","baseUrlUsers","baseUrlResults","parseJwt","token","person","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","payload","JSON","parse","email","console","log","error","addWorkout","newObject","setAppError","setSuccess","config","method","url","headers","Authorization","data","user","res","deleteWorkout","workout","editWorkout","getProfessionalsResults","alert","getResultsByUser","getAmateursResults","register","post","then","response","catch","login","firstname","userType","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst parseJwt = (token, person) => { //Otetaan tokeniin tallennetut tiedot\r\n    try {\r\n        var base64Url = token.split('.')[1];\r\n        var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n        var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(''));\r\n        let payload=JSON.parse(jsonPayload);\r\n\r\n        if(payload.email==person){ //Tarkistetaan, onko tokeniin tallennettu sähköpostiosoite sama kuin userContextissa oleva sähköpostiosoite\r\n            console.log(\"sama henkilö\");\r\n            return true;\r\n        } else {\r\n            console.log(\"eri henkilö\");\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        console.log(\"Error\");\r\n        return null;\r\n    }\r\n};\r\n\r\nconst addWorkout = async (newObject, token, setAppError, setSuccess) => { //Uuden treenin lisääminen\r\n    console.log(newObject);\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/id/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: newObject\r\n    }//näihin kohtiin ;?\r\n    \r\n    let user = parseJwt(token, newObject.person); //Lähetetään metodille token ja userContextissa oleva kirjautuneen henkilön sähköpostiosoite\r\n    if(user===true){\r\n        try {\r\n            let res = await axios(config);\r\n            setSuccess(true);\r\n            return res.data;\r\n        } catch (error){\r\n            setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\r\n            return;\r\n        };\r\n    } else {\r\n        setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\r\n        return;\r\n    }\r\n\r\n};\r\n\r\nconst deleteWorkout = async (workout, token, setAppError, setSuccess) => { //Treenin poistaminen\r\n    const config = {\r\n        method: 'delete',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        setSuccess(true);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin poistamisessa, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst editWorkout = async (workout, token, setAppError, setSuccess) => { //Treenin muokkaaminen\r\n    console.log(workout);\r\n    const config = {\r\n        method: 'patch',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        setAppError(null);\r\n        setSuccess(true);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin muokkaamisessa, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async (token) => { //Haetaan ammattilaisten treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {Authorization: 'Bearer ' + token}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getResultsByUser = async (email, token) => { //Haetaan kirjautuneen käyttäjän treenit\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/own-results/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: email\r\n    }\r\n    try {\r\n        \r\n        let res = await axios(config);\r\n        console.log(res.data);\r\n        return res.data;\r\n    } catch (error){\r\n        //alert(error);\r\n        console.log(\"User has no excercises yet\");\r\n        return;\r\n    };\r\n}\r\n\r\nconst getAmateursResults = async () => { //Haetaan harrastajien treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\n\r\nconst register = async (newObject, setAppError, setSuccess) =>{ //Rekisteröidytään\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        setSuccess(true);\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n            setAppError(\"Rekisteröityminen epäonnistui, yritä uudelleen!\");\r\n            return \"virhe\";\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setAppError, login) => { //Kirjaudutaan sisään\r\n    let res = await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        console.log(response);\r\n        login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\r\n    })\r\n    .catch (error => {\r\n        setAppError(\"Sisäänkirjautuminen epäonnistui, yritä uudelleen!\");\r\n        return \"virhe\";\r\n    })\r\n}\r\n\r\nconst logout = (logout) => { //Kirjaudutaan ulos\r\n    logout();\r\n}\r\n\r\nexport {getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser}\r\n"]},"metadata":{},"sourceType":"module"}