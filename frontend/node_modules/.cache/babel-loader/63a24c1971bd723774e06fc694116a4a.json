{"ast":null,"code":"import axios from 'axios';\nimport { useContext } from 'react';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n/*const getAll = async () => {\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrl,\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};*/\n\nconst getProfessionalsResults = async () => {\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/professionals/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getAmateursResults = async () => {\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/amateurs/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst signup = async (newObject, setError) => {\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    return response;\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Rekisteröityminen epäonnistui\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nconst login = async (newObject, setError, login, setUID) => {\n  await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    login();\n    setUID(newObject.uid);\n    return response;\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nexport default getProfessionalsResults;","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","useContext","baseUrlUsers","baseUrlResults","getProfessionalsResults","config","method","url","headers","res","data","error","alert","getAmateursResults","signup","newObject","setError","post","then","response","catch","customError","userMessage","login","setUID","uid"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,OAAzB;AAEA,MAAMC,YAAY,GAAG,iCAArB;AACA,MAAMC,cAAc,GAAG,mCAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,uBAAuB,GAAG,YAAY;AAExC,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAEJ,cAAc,GAAG,iBAFX;AAGXK,IAAAA,OAAO,EAAE;AAHE,GAAf;;AAKA,MAAI;AACA,QAAIC,GAAG,GAAG,MAAMT,KAAK,CAACK,MAAD,CAArB;AACA,WAAOI,GAAG,CAACC,IAAX;AACH,GAHD,CAGE,OAAOC,KAAP,EAAa;AACXC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAdD;;AAgBA,MAAME,kBAAkB,GAAG,YAAY;AAEnC,QAAMR,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,GAAG,EAAEJ,cAAc,GAAG,YAFX;AAGXK,IAAAA,OAAO,EAAE;AAHE,GAAf;;AAKA,MAAI;AACA,QAAIC,GAAG,GAAG,MAAMT,KAAK,CAACK,MAAD,CAArB;AACA,WAAOI,GAAG,CAACC,IAAX;AACH,GAHD,CAGE,OAAOC,KAAP,EAAa;AACXC,IAAAA,KAAK,CAACD,KAAD,CAAL;AACA;AACH;;AAAA;AACJ,CAdD;;AAgBA,MAAMG,MAAM,GAAG,OAAOC,SAAP,EAAkBC,QAAlB,KAA8B;AACzC,QAAMhB,KAAK,CAACiB,IAAN,CAAY,GAAEf,YAAa,YAA3B,EAAwCa,SAAxC,EACLG,IADK,CACAC,QAAQ,IAAI;AACd,WAAOA,QAAP;AACH,GAHK,EAILC,KAJK,CAIET,KAAK,IAAI;AACb,QAAGA,KAAK,CAACQ,QAAT,EAAkB;AACd,UAAIE,WAAW,GAAGV,KAAK,CAACQ,QAAxB;AACAE,MAAAA,WAAW,CAACC,WAAZ,GAA0B,+BAA1B;AACAN,MAAAA,QAAQ,CAACK,WAAD,CAAR;AACA,aAAOV,KAAP;AACH;AACJ,GAXK,CAAN;AAYH,CAbD;;AAeA,MAAMY,KAAK,GAAG,OAAOR,SAAP,EAAkBC,QAAlB,EAA4BO,KAA5B,EAAmCC,MAAnC,KAA8C;AACxD,QAAMxB,KAAK,CAACiB,IAAN,CAAa,GAAEf,YAAa,SAA5B,EAAsCa,SAAtC,EACLG,IADK,CACAC,QAAQ,IAAG;AACbI,IAAAA,KAAK;AACLC,IAAAA,MAAM,CAACT,SAAS,CAACU,GAAX,CAAN;AACA,WAAON,QAAP;AACH,GALK,EAMLC,KANK,CAMET,KAAK,IAAI;AACb,QAAGA,KAAK,CAACQ,QAAT,EAAkB;AACd,UAAIE,WAAW,GAAGV,KAAK,CAACQ,QAAxB;AACAE,MAAAA,WAAW,CAACC,WAAZ,GAA0B,4EAA1B;AACAN,MAAAA,QAAQ,CAACK,WAAD,CAAR;AACA,aAAOV,KAAP;AACH;AACJ,GAbK,CAAN;AAcH,CAfD;;AAgBA,eAAeP,uBAAf","sourcesContent":["import axios from 'axios';\r\nimport {useContext} from 'react';\r\n\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\n/*const getAll = async () => {\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrl,\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};*/\r\n\r\nconst getProfessionalsResults = async () => {\r\n    \r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getAmateursResults = async () => {\r\n    \r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst signup = async (newObject, setError) =>{\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Rekisteröityminen epäonnistui\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setError, login, setUID) => {\r\n    await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        login();\r\n        setUID(newObject.uid);\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\nexport default getProfessionalsResults;"]},"metadata":{},"sourceType":"module"}