{"ast":null,"code":"import axios from 'axios';\nimport { useContext } from 'react';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n\nconst getAllResults = async () => {\n  //Kaikkien tulosten hakemiseen tietokannasta\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/',\n    headers: {},\n    data: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst addWorkout = async newObject => {\n  //Uuden treenin lisääminen\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/id/',\n    headers: {},\n    data: newObject\n  }; //näihin kohtiin ;?\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst deleteWorkout = async workout => {\n  //Treenin poistaminen\n  const config = {\n    method: 'delete',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {},\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst editWorkout = async workout => {\n  //Treenin muokkaaminen\n  console.log(workout);\n  const config = {\n    method: 'patch',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {},\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getProfessionalsResults = async () => {\n  //Haetaan ammattilaisten treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/professionals/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getResultsByUser = async email => {\n  //Haetaan kirjautuneen käyttäjän treenit\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/own-results/',\n    headers: {},\n    data: email\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getAmateursResults = async () => {\n  //Haetaan harrastajien treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/amateurs/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst register = async (newObject, setError) => {\n  //Rekisteröidytään\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    return response;\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Rekisteröityminen epäonnistui\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nconst login = async (newObject, setError, login, setEmail, setUsertype, setFirstname) => {\n  //Kirjaudutaan sisään\n  let res = await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    console.log(response.data.userType);\n    login();\n    setEmail(newObject.email);\n    setUsertype(response.data.userType);\n    setFirstname(response.data.firstname);\n\n    if (response.data.message === \"Logged in !\") {\n      return res.data;\n    } else {\n      return \"error\";\n    }\n  }).catch(error => {\n    if (error.response) {\n      let customError = error.response;\n      customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\n      setError(customError);\n      return error;\n    }\n  });\n};\n\nconst logout = (logout, setEmail, setFirstname, setUsertype) => {\n  //Kirjaudutaan ulos\n  logout();\n  setEmail(\" \");\n  setFirstname(\" \");\n  setUsertype(\" \");\n};\n\nexport { getAmateursResults, getProfessionalsResults, addWorkout, getAllResults, deleteWorkout, editWorkout, register, login, logout, getResultsByUser };","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","useContext","baseUrlUsers","baseUrlResults","getAllResults","config","method","url","headers","data","res","error","alert","addWorkout","newObject","deleteWorkout","workout","editWorkout","console","log","getProfessionalsResults","getResultsByUser","email","getAmateursResults","register","setError","post","then","response","catch","customError","userMessage","login","setEmail","setUsertype","setFirstname","userType","firstname","message","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {useContext} from 'react';\r\n\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst getAllResults = async () => {  //Kaikkien tulosten hakemiseen tietokannasta\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/',\r\n        headers: {},\r\n        data: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst addWorkout = async (newObject) => { //Uuden treenin lisääminen\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/id/',\r\n        headers: {},\r\n        data: newObject\r\n    }//näihin kohtiin ;?\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst deleteWorkout = async (workout) => { //Treenin poistaminen\r\n    const config = {\r\n        method: 'delete',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst editWorkout = async (workout) => { //Treenin muokkaaminen\r\n    console.log(workout);\r\n    const config = {\r\n        method: 'patch',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async () => { //Haetaan ammattilaisten treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getResultsByUser = async (email) => { //Haetaan kirjautuneen käyttäjän treenit\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/own-results/',\r\n        headers: {},\r\n        data: email\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n}\r\n\r\nconst getAmateursResults = async () => { //Haetaan harrastajien treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\n\r\nconst register = async (newObject, setError) =>{ //Rekisteröidytään\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Rekisteröityminen epäonnistui\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setError, login, setEmail, setUsertype, setFirstname) => { //Kirjaudutaan sisään\r\n    let res = await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        console.log(response.data.userType);\r\n        login();\r\n        setEmail(newObject.email);\r\n        setUsertype(response.data.userType);\r\n        setFirstname(response.data.firstname);\r\n        if (response.data.message===\"Logged in !\"){\r\n            return res.data;\r\n        } else {\r\n            return \"error\";\r\n        }\r\n    }\r\n    )\r\n    .catch (error => {\r\n        if(error.response){\r\n            let customError = error.response;\r\n            customError.userMessage = \"Käyttäjää ei ole olemassa. Tarkista käyttäjätunnuksesi ja yritä uudelleen!\";\r\n            setError(customError);\r\n            return error;\r\n        }\r\n    })\r\n}\r\n\r\nconst logout = (logout, setEmail, setFirstname, setUsertype) => { //Kirjaudutaan ulos\r\n    logout();\r\n    setEmail(\" \");\r\n    setFirstname(\" \");\r\n    setUsertype(\" \");\r\n}\r\n\r\nexport {getAmateursResults, getProfessionalsResults, addWorkout, getAllResults, deleteWorkout, editWorkout, register, login, logout, getResultsByUser}\r\n"]},"metadata":{},"sourceType":"module"}