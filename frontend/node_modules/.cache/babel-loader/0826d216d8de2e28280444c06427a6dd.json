{"ast":null,"code":"import axios from 'axios';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n\nconst addWorkout = async (newObject, token, setAppError) => {\n  //Uuden treenin lisääminen\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/id/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: newObject\n  }; //näihin kohtiin ;?\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\n    return;\n  }\n\n  ;\n};\n\nconst deleteWorkout = async (workout, token, setAppError) => {\n  //Treenin poistaminen\n  const config = {\n    method: 'delete',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    setAppError(\"Virhe treenin poistamisessa, yritä uudelleen!\");\n    return;\n  }\n\n  ;\n};\n\nconst editWorkout = async (workout, token, setAppError) => {\n  //Treenin muokkaaminen\n  console.log(workout);\n  const config = {\n    method: 'patch',\n    url: baseUrlResults + '/' + workout + '/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: workout\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    setAppError(\"Virhe treenin muokkaamisessa, yritä uudelleen!\");\n    return;\n  }\n\n  ;\n};\n\nconst getProfessionalsResults = async token => {\n  //Haetaan ammattilaisten treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/professionals/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getResultsByUser = async (email, token) => {\n  //Haetaan kirjautuneen käyttäjän treenit\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/own-results/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    },\n    data: email\n  };\n\n  try {\n    let res = await axios(config);\n    console.log(res.data);\n    return res.data;\n  } catch (error) {\n    //alert(error);\n    console.log(\"User has no excercises yet\");\n    return;\n  }\n\n  ;\n};\n\nconst getAmateursResults = async () => {\n  //Haetaan harrastajien treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/amateurs/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst register = async (newObject, setAppError) => {\n  //Rekisteröidytään\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    return response;\n  }).catch(error => {\n    setAppError(\"Rekisteröityminen epäonnistui, yritä uudelleen!\");\n    return;\n  });\n};\n\nconst login = async (newObject, setAppError, login) => {\n  //Kirjaudutaan sisään\n  let res = await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    console.log(response);\n    login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\n  }).catch(error => {\n    setAppError(\"Sisäänkirjautuminen epäonnistui, yritä uudelleen!\");\n    return;\n  });\n};\n\nconst logout = logout => {\n  //Kirjaudutaan ulos\n  logout();\n};\n\nexport { getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser };","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","baseUrlUsers","baseUrlResults","addWorkout","newObject","token","setAppError","config","method","url","headers","Authorization","data","res","error","deleteWorkout","workout","editWorkout","console","log","getProfessionalsResults","alert","getResultsByUser","email","getAmateursResults","register","post","then","response","catch","login","firstname","userType","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst addWorkout = async (newObject, token, setAppError) => { //Uuden treenin lisääminen\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/id/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: newObject\r\n    }//näihin kohtiin ;?\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst deleteWorkout = async (workout, token, setAppError) => { //Treenin poistaminen\r\n    const config = {\r\n        method: 'delete',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin poistamisessa, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst editWorkout = async (workout, token, setAppError) => { //Treenin muokkaaminen\r\n    console.log(workout);\r\n    const config = {\r\n        method: 'patch',\r\n        url: baseUrlResults + '/' + workout + '/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: workout\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin muokkaamisessa, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async (token) => { //Haetaan ammattilaisten treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {Authorization: 'Bearer ' + token}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getResultsByUser = async (email, token) => { //Haetaan kirjautuneen käyttäjän treenit\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/own-results/',\r\n        headers: {Authorization: 'Bearer ' + token},\r\n        data: email\r\n    }\r\n    try {\r\n        \r\n        let res = await axios(config);\r\n        console.log(res.data);\r\n        return res.data;\r\n    } catch (error){\r\n        //alert(error);\r\n        console.log(\"User has no excercises yet\");\r\n        return;\r\n    };\r\n}\r\n\r\nconst getAmateursResults = async () => { //Haetaan harrastajien treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    }\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\n\r\nconst register = async (newObject, setAppError) =>{ //Rekisteröidytään\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n            setAppError(\"Rekisteröityminen epäonnistui, yritä uudelleen!\");\r\n            return;\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setAppError, login) => { //Kirjaudutaan sisään\r\n    let res = await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        console.log(response);\r\n        login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\r\n    }\r\n    )\r\n    .catch (error => {\r\n        setAppError(\"Sisäänkirjautuminen epäonnistui, yritä uudelleen!\");\r\n        return;\r\n    })\r\n}\r\n\r\nconst logout = (logout) => { //Kirjaudutaan ulos\r\n    logout();\r\n}\r\n\r\nexport {getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser}\r\n"]},"metadata":{},"sourceType":"module"}