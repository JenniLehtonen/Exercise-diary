{"ast":null,"code":"import axios from 'axios';\nconst baseUrlUsers = 'http://localhost:5000/api/users';\nconst baseUrlResults = 'http://localhost:5000/api/results';\n\nconst addWorkout = async (workoutObject, setAppError, setSuccess) => {\n  //Uuden treenin lisääminen\n  console.log(workoutObject);\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/' + workoutObject.person + '/',\n    headers: {\n      Authorization: 'Bearer ' + workoutObject.token\n    },\n    data: workoutObject\n  };\n\n  try {\n    let res = await axios(config);\n    setSuccess(true);\n    return res.data;\n  } catch (error) {\n    setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\n    return;\n  }\n\n  ;\n};\n\nconst deleteWorkout = async (workoutObject, setAppError, setSuccess) => {\n  //Treenin poistaminen\n  const config = {\n    method: 'delete',\n    url: baseUrlResults + '/' + workoutObject.option + '/',\n    headers: {\n      Authorization: 'Bearer ' + workoutObject.token\n    },\n    data: workoutObject\n  };\n\n  try {\n    let res = await axios(config);\n    setSuccess(true);\n    return res.data;\n  } catch (error) {\n    setAppError(\"Virhe treenin poistamisessa, yritä uudelleen!\");\n    return;\n  }\n\n  ;\n};\n\nconst editWorkout = async (workoutObject, setAppError, setSuccess) => {\n  //Treenin muokkaaminen\n  const config = {\n    method: 'patch',\n    url: baseUrlResults + '/' + workoutObject + '/',\n    headers: {\n      Authorization: 'Bearer ' + workoutObject.token\n    },\n    data: workoutObject\n  };\n\n  try {\n    let res = await axios(config);\n    setAppError(null);\n    setSuccess(true);\n    return res.data;\n  } catch (error) {\n    setAppError(\"Virhe treenin muokkaamisessa, yritä uudelleen!\");\n    return;\n  }\n\n  ;\n};\n\nconst getProfessionalsResults = async token => {\n  //Haetaan ammattilaisten treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/professionals/',\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst getResultsByUser = async personObject => {\n  //Haetaan kirjautuneen käyttäjän treenit\n  const config = {\n    method: 'post',\n    url: baseUrlResults + '/' + personObject.email + '/',\n    headers: {\n      Authorization: 'Bearer ' + personObject.token\n    },\n    data: personObject\n  };\n\n  try {\n    let res = await axios(config);\n    console.log(res.data);\n    return res.data;\n  } catch (error) {\n    console.log(\"User has no excercises yet\");\n    return;\n  }\n\n  ;\n};\n\nconst getAmateursResults = async () => {\n  //Haetaan harrastajien treenit\n  const config = {\n    method: 'get',\n    url: baseUrlResults + '/amateurs/',\n    headers: {}\n  };\n\n  try {\n    let res = await axios(config);\n    return res.data;\n  } catch (error) {\n    alert(error);\n    return;\n  }\n\n  ;\n};\n\nconst register = async (newObject, setAppError, setSuccess) => {\n  //Rekisteröidytään\n  await axios.post(`${baseUrlUsers}/register/`, newObject).then(response => {\n    setSuccess(true);\n    return response;\n  }).catch(error => {\n    setAppError(\"Rekisteröityminen epäonnistui, yritä uudelleen!\");\n    return \"virhe\";\n  });\n};\n\nconst login = async (newObject, setAppError, login) => {\n  //Kirjaudutaan sisään\n  let res = await axios.post(`${baseUrlUsers}/login/`, newObject).then(response => {\n    console.log(response);\n    login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\n  }).catch(error => {\n    setAppError(\"Sisäänkirjautuminen epäonnistui, yritä uudelleen!\");\n    return \"virhe\";\n  });\n};\n\nconst logout = logout => {\n  //Kirjaudutaan ulos\n  logout();\n};\n\nexport { getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser };","map":{"version":3,"sources":["C:/Users/jenni/Documents/GitHub/harjoitus4-JenniMERN/frontend/src/user/services/user-services.js"],"names":["axios","baseUrlUsers","baseUrlResults","addWorkout","workoutObject","setAppError","setSuccess","console","log","config","method","url","person","headers","Authorization","token","data","res","error","deleteWorkout","option","editWorkout","getProfessionalsResults","alert","getResultsByUser","personObject","email","getAmateursResults","register","newObject","post","then","response","catch","login","firstname","userType","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst addWorkout = async (workoutObject, setAppError, setSuccess) => { //Uuden treenin lisääminen\r\n    console.log(workoutObject);\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/' + workoutObject.person + '/',\r\n        headers: {Authorization: 'Bearer ' + workoutObject.token},\r\n        data: workoutObject\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        setSuccess(true);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst deleteWorkout = async (workoutObject, setAppError, setSuccess) => { //Treenin poistaminen\r\n    const config = {\r\n        method: 'delete',\r\n        url: baseUrlResults + '/' + workoutObject.option + '/',\r\n        headers: {Authorization: 'Bearer ' + workoutObject.token},\r\n        data: workoutObject\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        setSuccess(true);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin poistamisessa, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst editWorkout = async (workoutObject, setAppError, setSuccess) => { //Treenin muokkaaminen\r\n    const config = {\r\n        method: 'patch',\r\n        url: baseUrlResults + '/' + workoutObject + '/',\r\n        headers: {Authorization: 'Bearer ' + workoutObject.token},\r\n        data: workoutObject\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        setAppError(null);\r\n        setSuccess(true);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin muokkaamisessa, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async (token) => { //Haetaan ammattilaisten treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {Authorization: 'Bearer ' + token}\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\nconst getResultsByUser = async (personObject) => { //Haetaan kirjautuneen käyttäjän treenit\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/' + personObject.email + '/',\r\n        headers: {Authorization: 'Bearer ' + personObject.token},\r\n        data: personObject\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        console.log(res.data);\r\n        return res.data;\r\n    } catch (error){\r\n        console.log(\"User has no excercises yet\");\r\n        return;\r\n    };\r\n}\r\n\r\nconst getAmateursResults = async () => { //Haetaan harrastajien treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        alert(error);\r\n        return;\r\n    };\r\n};\r\n\r\n\r\nconst register = async (newObject, setAppError, setSuccess) =>{ //Rekisteröidytään\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        setSuccess(true);\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n            setAppError(\"Rekisteröityminen epäonnistui, yritä uudelleen!\");\r\n            return \"virhe\";\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setAppError, login) => { //Kirjaudutaan sisään\r\n    let res = await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        console.log(response);\r\n        login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\r\n    })\r\n    .catch (error => {\r\n        setAppError(\"Sisäänkirjautuminen epäonnistui, yritä uudelleen!\");\r\n        return \"virhe\";\r\n    })\r\n}\r\n\r\nconst logout = (logout) => { //Kirjaudutaan ulos\r\n    logout();\r\n}\r\n\r\nexport {getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser}\r\n"]},"metadata":{},"sourceType":"module"}