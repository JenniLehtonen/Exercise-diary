[{"C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\index.js":"1","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\App.js":"2","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Navigation.js":"3","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\contexts\\UserContext.js":"4","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\contexts\\ErrorContext.js":"5","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\OmatTreenit.js":"6","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Login.js":"7","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Harrastajat.js":"8","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Ammattilaiset.js":"9","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Etusivu.js":"10","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\EditWorkout.js":"11","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Register.js":"12","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\AddWorkout.js":"13","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\user\\services\\user-services.js":"14","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Footer.js":"15"},{"size":232,"mtime":1623929120412,"results":"16","hashOfConfig":"17"},{"size":1586,"mtime":1623929120412,"results":"18","hashOfConfig":"17"},{"size":3210,"mtime":1623929120412,"results":"19","hashOfConfig":"17"},{"size":374,"mtime":1623929120412,"results":"20","hashOfConfig":"17"},{"size":156,"mtime":1623929120412,"results":"21","hashOfConfig":"17"},{"size":5851,"mtime":1623929120412,"results":"22","hashOfConfig":"17"},{"size":5730,"mtime":1623929120412,"results":"23","hashOfConfig":"17"},{"size":2500,"mtime":1623929120412,"results":"24","hashOfConfig":"17"},{"size":2604,"mtime":1623929120412,"results":"25","hashOfConfig":"17"},{"size":398,"mtime":1624701960286,"results":"26","hashOfConfig":"17"},{"size":3472,"mtime":1623929120412,"results":"27","hashOfConfig":"17"},{"size":3300,"mtime":1623929120412,"results":"28","hashOfConfig":"17"},{"size":3570,"mtime":1623929120412,"results":"29","hashOfConfig":"17"},{"size":4201,"mtime":1623929120412,"results":"30","hashOfConfig":"17"},{"size":266,"mtime":1624702289265,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"n4nn0t",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\index.js",[],["71","72"],"C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\App.js",[],"C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Navigation.js",[],"C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\contexts\\UserContext.js",[],"C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\contexts\\ErrorContext.js",[],"C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\OmatTreenit.js",["73","74"],"import React, {useState, useContext, useEffect} from 'react';\r\nimport {Table, Modal, Button, Alert} from 'react-bootstrap';\r\nimport AddWorkout from '../components/AddWorkout';\r\nimport EditWorkout from '../components/EditWorkout';\r\nimport UserContext from '../contexts/UserContext';\r\nimport ErrorContext from '../contexts/ErrorContext';\r\nimport {getResultsByUser, deleteWorkout} from '../user/services/user-services';\r\n\r\n\r\nconst OmatTreenit = () => {\r\n    const userContext = useContext(UserContext);\r\n    const errorContext = useContext(ErrorContext);\r\n    const [showAdd, setShowAdd] = useState(false); //Modaalin dialogin näkyvyys\r\n    const [showEdit, setShowEdit] = useState(false); //Modaalin dialogin näkyvyys\r\n    const [results, setResults] = useState([]);\r\n    const [show, setShow] = useState(true); //Virheilmoituksen näyttämiseen\r\n    const [option, setOption] = useState(\" \"); //Tämän avulla lähetetään valitun treenin id komponentille, jossa muokataan treenien tietoja\r\n  \r\n    const person = userContext.Email; //Treenin poistamista varten\r\n    const token = userContext.token;\r\n\r\n    let workouts = {\r\n      email: person, //haetaan kirjautuneen käyttäjän sähköpostiosoite contextista, ja sen avulla haetaan käyttäjän omat treenit tietokannasta\r\n      token: token //lähetetään myös token ja jos kaikki on kunnossa, näytetään käyttäjän omat tulokset\r\n    };\r\n\r\n    useEffect (() =>{\r\n        getResultsByUser(workouts).then(response => setResults(response));\r\n    }, [])\r\n    \r\n    const sendWorkoutToBeDeleted = (option) => { //Lähetetään treeni poistettavaksi\r\n      let workoutObject = {\r\n        option: option,\r\n        person: person,\r\n        token: token\r\n    };\r\n    let newResults;\r\n      deleteWorkout(workoutObject, errorContext.setAppError); //Lähetetään valittu treeni poistettavaksi\r\n      newResults = results.filter(function(obj) { //Luodaan uusi array, josta poistetaan valittu treeni\r\n        return obj._id !== option;\r\n    });\r\n      setResults(newResults); //Tallennetaan stateen uusi array\r\n    };\r\n\r\n    const closeModalWindow = () => { \r\n      errorContext.setAppError(null); //Tyhjennetään mahdolliset treenien muokkaamisessa jne. tulleet virheet errorContextista\r\n      userContext.setSuccess(false); //Asetetaan success-tila falseksi, kun modaali ikkuna suljetaan\r\n      setShowAdd(false); //Suljetaan modaalinen ikkuna\r\n      setShowEdit(false);\r\n    };\r\n\r\n    const closeErrorMessage = () => { //Kun painetaan rastia virheilmoituksessa, suljetaan virheilmoitus ja poistetaan virhe errorcontextista\r\n      setShow(false);\r\n      errorContext.setAppError(null);\r\n    };\r\nconsole.log(results);\r\n    function AddWorkouts(props) {\r\n\r\n        return (\r\n          <Modal\r\n            {...props}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            backdrop=\"static\"\r\n          >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Lisää uusia treenejä\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {<AddWorkout />}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button onClick={closeModalWindow}>Sulje</Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        );\r\n      }\r\n\r\n      function EditWorkouts(props) {\r\n\r\n        return (\r\n          <Modal\r\n            {...props}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            backdrop=\"static\"\r\n          >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Muokkaa omia treenejä\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {<EditWorkout option={option} />}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button onClick={closeModalWindow}>Sulje</Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        );\r\n      }\r\n      \r\n    return(\r\n        <>\r\n        {errorContext.appError===\"Virhe treenin poistamisessa, yritä uudelleen!\" && \r\n        <Alert variant=\"danger\" style={{width: \"50%\", margin: \"auto\", marginBottom: \"1rem\"}} onClose={() => closeErrorMessage()} dismissible>\r\n        <Alert.Heading>Virhe</Alert.Heading>\r\n        <p>\r\n          {errorContext.appError}\r\n        </p>\r\n      </Alert>\r\n        }\r\n        <>\r\n          <AddWorkouts\r\n            show={showAdd}\r\n            onHide={closeModalWindow}\r\n          />\r\n        </>\r\n        <>\r\n          <EditWorkouts\r\n            show={showEdit}\r\n            onHide={closeModalWindow}\r\n          />\r\n        </>\r\n        <h3 id=\"username\">Omat treenit: {userContext.Firstname}</h3>\r\n        <Button id=\"editWorkoutButton\" variant=\"primary\" onClick={() => setShowAdd(true)}>Lisää treenejä</Button>\r\n        <div id=\"table-div\">\r\n            <Table striped bordered hover size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                    <th>Pvm</th>\r\n                    <th>Laji</th>\r\n                    <th>Suorituskerrat</th>\r\n                    <th>Paino</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {results && results.map((result, index) => {\r\n                      return <tr key={index}><td>{result.date.slice(0, 10).replaceAll(\"-\", \".\")}</td><td>{result.sport}</td><td>{result.times}</td><td>{result.weight}</td><td className=\"removeButton\"><Button onClick={() => sendWorkoutToBeDeleted(result._id)}>Poista</Button><Button id=\"editButton\" onClick={() => {setShowEdit(true); setOption(result._id)}}>Muokkaa</Button></td></tr>;\r\n                   })}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nexport default OmatTreenit;","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Login.js",["75"],"import React, {useContext, useState} from 'react';\r\nimport {Button, Form, Alert, Modal} from 'react-bootstrap';\r\nimport UserContext from '../contexts/UserContext';\r\nimport ErrorContext from '../contexts/ErrorContext';\r\nimport {login, logout} from '../user/services/user-services';\r\nimport Register from './Register';\r\nimport {BrowserRouter as Redirect, useHistory} from 'react-router-dom'; //Applikaation sivujen reititys\r\n\r\nconst Login = () => {\r\n  const userContext = useContext(UserContext);\r\n  const errorContext = useContext(ErrorContext);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [show, setShow] = useState(true); //Virheilmoituksen näyttämiseen\r\n  let history = useHistory();\r\n  let registerationSuccess = \"\"; //Alustetaan muuttuja, jotta ilmoitus rekisteröitymisen onnistumisesta pystytään näyttämään\r\n  \r\n  const logOut = () => {\r\n    logout(userContext.logout, userContext.setEmail, userContext.setUsertype, userContext.setFirstname) //Kirjaudutaan ulos userContextissa olevan metodin avulla\r\n    console.log(userContext);\r\n    history.push('/') //Palataan etusivulle\r\n  }\r\n  //Määritetään loginButtonin ulkoasu ja toiminnot sen perusteella, onko käyttäjä kirjautunut vai ei\r\n  let loginButton;\r\n  if(userContext.isLoggedIn===true){\r\n    loginButton = (<Button variant=\"danger\"  onClick={logOut}>Kirjaudu ulos</Button>);\r\n  } else {\r\n    loginButton = (<Button variant=\"primary\" onClick={() => setModalShow(true)}>Kirjaudu</Button>);\r\n  }\r\n  \r\n    function MyVerticallyCenteredModal(props) {\r\n    \r\n      const [user, setUser] = useState({\r\n        password: \"\",\r\n        name: \"\",\r\n        email: \"\"\r\n      });\r\n      const [visible, setVisible] = useState(false); //Rekisteröitymis-painiketta varten\r\n\r\n      const emptyErrorContext = (e) => {\r\n        errorContext.setAppError(null);\r\n        setVisible(!visible);\r\n      }\r\n      \r\n      const button = (\r\n        <Button id=\"register\" onClick={emptyErrorContext}>Rekisteröidy</Button> //Rekisteröitymispainikkeen näkyvyyden muuttaminen\r\n      );\r\n\r\n      const emailHandler = (e) => {\r\n        e.preventDefault();\r\n        setUser({...user, email:e.target.value});\r\n      };\r\n\r\n      const passwordHandler = (e) => {\r\n        e.preventDefault();\r\n        setUser({...user, password:e.target.value});\r\n      };\r\n\r\n      const handleSubmit = (e) => {\r\n          if(login(user, errorContext.setAppError, userContext.login, userContext.setUsertype, userContext.setFirstname)===\"virhe\"){\r\n            setModalShow(true);\r\n          } else {\r\n            userContext.setSuccess(false); //Asetetaan success-tila falseksi (Jos käyttäjä on ensin rekisteröitynyt, ei sitten kirjautumisen jälkeen näytetä onnistumis-viestejä)\r\n            closeErrorMessage();\r\n          }\r\n      }\r\n\r\n      const closeErrorMessage = () => { //Kun painetaan rastia virheilmoituksessa, suljetaan virheilmoitus ja poistetaan virhe errorcontextista\r\n        setShow(false);\r\n        errorContext.setAppError(null);\r\n      };\r\n      \r\n      if(userContext.Success===true){\r\n        registerationSuccess = (\r\n          <Alert variant=\"success\">\r\n            Rekisteröityminen onnistui!\r\n        </Alert>\r\n        );\r\n      }\r\n        return(\r\n         <>\r\n          {UserContext.isLoggedIn ? <Redirect to='/'/>:\r\n          \r\n          <Modal\r\n        {...props}\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Kirjaudu sisään\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n          <Form.Group>\r\n            <h6>Kirjoita sähköposti ja salasana</h6>\r\n            <Form.Label>Sähköposti:</Form.Label>\r\n            <Form.Control type=\"email\" placeholder=\"Syötä sähköposti\" \r\n            required value={user.email}\r\n            onChange={(e) => emailHandler(e)}/>\r\n            <Form.Label>Salasana:</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Syötä salasana\"\r\n            required value={user.password}\r\n            onChange={(e) => passwordHandler(e)} />\r\n            <br />\r\n            <Button id=\"logIn\" onClick={() =>{handleSubmit();}}>Kirjaudu sisään</Button>\r\n          </Form.Group>\r\n          {errorContext.appError && \r\n          <Alert variant=\"danger\" onClose={() => closeErrorMessage()} dismissible>\r\n            <Alert.Heading>Virhe</Alert.Heading>\r\n            <p>\r\n              {errorContext.appError}\r\n            </p>\r\n          </Alert>\r\n          }\r\n          {registerationSuccess}\r\n        </Form>\r\n          <br />\r\n          <h6>Eikö sinulla ole vielä tiliä?</h6>\r\n          {button}\r\n          {visible && <Register />}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={closeModalWindow}>Sulje</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    }\r\n      </>\r\n        );\r\n        \r\n    }\r\n    const closeModalWindow = () => { //Kutsutaan, kun halutaan sulkea kirjautumiseen/rekisteröitymiseen tarkoitettu modaali-ikkuna\r\n      errorContext.setAppError(null); //Tyhjennetään mahdolliset kirjautumisessa tai rekisteröitymisessä tulleet virheet errorContextista\r\n      userContext.setSuccess(false); //Vaihdetaan Success-arvo falseksi, kun suljetaan modaali-ikkuna. Näin onnistuminen rekisteröitymisestä ei näy enää, jos ikkuna avataan uudestaan\r\n      setModalShow(false); //Suljetaan modaalinen ikkuna\r\n    };\r\n\r\n    return(\r\n        <>\r\n          <MyVerticallyCenteredModal\r\n            show={modalShow}\r\n            onHide={closeModalWindow}\r\n          />\r\n          {loginButton}\r\n        </>\r\n    )\r\n}\r\nexport default Login;","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Harrastajat.js",["76","77"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {Table, Alert} from 'react-bootstrap';\r\nimport {getAmateursResults} from '../user/services/user-services';\r\nimport ErrorContext from '../contexts/ErrorContext';\r\nimport _ from 'lodash';\r\n\r\nconst Harrastajat = () => {\r\n    const errorContext = useContext(ErrorContext);\r\n    const [show, setShow] = useState(true); //Virheilmoituksen näyttämiseen\r\n    const [results, setResults] = useState([]);\r\n    useEffect (() =>{\r\n        getAmateursResults(errorContext.setAppError).then(response => setResults(response));\r\n    }, [])\r\n\r\n    var personsPerDay= _.map(_.countBy(results, \"date\"), (val, key) => ({ date: key, person: val })); //Lasketaan treenaajat päivittäin\r\n\r\n    var aResult = _(results) //Ryhmittele tietokannan tiedot päivittäin ja laske treenien määrä päivittäin\r\n        .groupBy(x => x.date)\r\n        .map((value, key) => \r\n        ({date: key,\r\n        results: _.sumBy(value,'times'),\r\n        users: value})).value();\r\n    \r\n    const amateursResults = aResult.map((result, index) => {\r\n        const persons = personsPerDay[index];\r\n        return (\r\n                <tr key={index}><td>{result.date.slice(0, 10).replaceAll(\"-\", \".\")}</td><td>{result.results}</td><td>{persons.person}</td></tr>\r\n        );\r\n    });\r\n\r\n    const closeErrorMessage = () => { //Kun painetaan rastia virheilmoituksessa, suljetaan virheilmoitus ja poistetaan virhe errorcontextista\r\n        setShow(false);\r\n        errorContext.setAppError(null);\r\n      };\r\n    \r\n    return(\r\n        <>\r\n        {errorContext.appError===\"Virhe tietojen haussa, yritä uudelleen myöhemmin!\" && \r\n        <Alert variant=\"danger\" style={{width: \"50%\", margin: \"auto\", marginBottom: \"1rem\"}} onClose={() => closeErrorMessage()} dismissible>\r\n        <Alert.Heading>Virhe</Alert.Heading>\r\n        <p>\r\n          {errorContext.appError}\r\n        </p>\r\n        </Alert>\r\n        }\r\n        <h2 style={{textAlign: \"center\"}}>Harrastajat</h2><br />\r\n        <div id=\"table-div\">\r\n            <Table striped bordered hover size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                    <th>Pvm</th>\r\n                    <th>Suoritukset yhteensä</th>\r\n                    <th>Suorittajalkm</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {amateursResults}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nexport default Harrastajat;","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Ammattilaiset.js",["78","79"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {Table, Alert} from 'react-bootstrap';\r\nimport {getProfessionalsResults} from '../user/services/user-services';\r\nimport UserContext from '../contexts/UserContext';\r\nimport ErrorContext from '../contexts/ErrorContext';\r\nimport _ from 'lodash';\r\n\r\nconst Ammattilaiset = () => {\r\n    const errorContext = useContext(ErrorContext);\r\n    const userContext = useContext(UserContext);\r\n    const [show, setShow] = useState(true); //Virheilmoituksen näyttämiseen\r\n    const [results, setResults] = useState([]);\r\n    useEffect (() =>{\r\n        getProfessionalsResults(userContext.token, errorContext.setAppError).then(response => setResults(response));\r\n    }, [])\r\n\r\n   var personsPerDay= _.map(_.countBy(results, \"date\"), (val, key) => ({ date: key, person: val })); //Lasketaan treenaajat päivittäin\r\n\r\n   var pResult = _(results) //Ryhmittele tietokannan tiedot päivittäin ja laske treenien määrä päivittäin\r\n        .groupBy(x => x.date)\r\n        .map((value, key) => \r\n        ({date: key,\r\n        results: _.sumBy(value,'times'),\r\n        users: value})).value();\r\n\r\n    const professionalsResults = pResult.map((result, index) => {\r\n        const persons = personsPerDay[index];\r\n        return (\r\n               <tr key={index}><td>{result.date.slice(0, 10).replaceAll(\"-\", \".\")}</td><td>{result.results}</td><td>{persons.person}</td></tr>\r\n        );\r\n      });\r\n    \r\n    const closeErrorMessage = () => { //Kun painetaan rastia virheilmoituksessa, suljetaan virheilmoitus ja poistetaan virhe errorcontextista\r\n    setShow(false);\r\n    errorContext.setAppError(null);\r\n    };\r\n\r\n    return(\r\n        <>\r\n        {errorContext.appError===\"Virhe tietojen haussa, yritä uudelleen myöhemmin!\" && \r\n        <Alert variant=\"danger\" style={{width: \"50%\", margin: \"auto\", marginBottom: \"1rem\"}} onClose={() => closeErrorMessage()} dismissible>\r\n        <Alert.Heading>Virhe</Alert.Heading>\r\n        <p>\r\n          {errorContext.appError}\r\n        </p>\r\n        </Alert>\r\n        }\r\n        <h2 style={{textAlign: \"center\"}}>Ammattilaiset</h2><br />\r\n        <div id=\"table-div\">\r\n            <Table striped bordered hover size=\"sm\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Pvm</th>\r\n                    <th>Suoritukset yhteensä</th>\r\n                    <th>Suorittajalkm</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {professionalsResults}\r\n            </tbody>\r\n            </Table>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nexport default Ammattilaiset;","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Etusivu.js",[],"C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\EditWorkout.js",["80"],"import React, {useState, useContext} from 'react';\r\nimport {Button, Form, Alert} from 'react-bootstrap';\r\nimport {editWorkout} from '../user/services/user-services';\r\nimport UserContext from '../contexts/UserContext';\r\nimport ErrorContext from '../contexts/ErrorContext';\r\n\r\nconst EditWorkout = (props) => {\r\n  const userContext = useContext(UserContext);\r\n  const errorContext = useContext(ErrorContext);\r\n  const [date, setDate] = React.useState('');\r\n  const [sport, setSport] = React.useState('');\r\n  const [times, setTimes] = React.useState('');\r\n  const [weight, setWeight] = React.useState('');\r\n  const [show, setShow] = useState(true); //Virheilmoituksen näyttämiseen\r\n\r\n  const person = userContext.Email; //Haetaan userContextista kirjautuneen käyttäjän sähköpostiosoite ja käyttäjätyyppi treenien muokkausta varten\r\n  const usertype = userContext.UserType;\r\n  const token = userContext.token;\r\n\r\n\r\n  let editSuccess = \"\"; //Alustetaan muuttuja, jotta ilmoitus treenin editoinnin onnistumisesta pystytään näyttämään\r\n\r\n  const dateHandler = (e) => {\r\n    e.preventDefault();\r\n    setDate(e.target.value);\r\n  };\r\n  const sportHandler = (e) => {\r\n    e.preventDefault();\r\n    setSport(e.target.value);\r\n  };\r\n  const timesHandler = (e) => {\r\n    e.preventDefault();\r\n    setTimes(e.target.value);\r\n  };\r\n  const weightHandler = (e) => {\r\n    e.preventDefault();\r\n    setWeight(e.target.value);\r\n  };\r\n  const sendWorkoutToBeEdited = () => {\r\n    let workoutObject = {\r\n      id : props.option, //propsien kautta saadaan tieto, mitä treeniä muokataan\r\n      date : date,\r\n      sport : sport,\r\n      times : times,\r\n      weight : weight,\r\n      person : person,\r\n      userType : usertype,\r\n      token: token\r\n  };\r\n  editWorkout(workoutObject, errorContext.setAppError, userContext.setSuccess) //Lähetetään valittu treeni muokattavaksi\r\n  };\r\n\r\n  const closeErrorMessage = () => { //Kun painetaan rastia virheilmoituksessa, suljetaan virheilmoitus ja poistetaan virhe errorcontextista\r\n    setShow(false);\r\n    errorContext.setAppError(null);\r\n  };\r\n\r\n  if(userContext.Success===true){\r\n    editSuccess = (\r\n      <Alert variant=\"success\">\r\n        Treenin muokkaaminen onnistui!\r\n    </Alert>\r\n    );\r\n  }\r\n    return(\r\n        <>\r\n          {errorContext.appError && \r\n          <Alert variant=\"danger\" onClose={() => closeErrorMessage()} dismissible>\r\n            <Alert.Heading>Virhe</Alert.Heading>\r\n            <p>\r\n              {errorContext.appError}\r\n            </p>\r\n          </Alert>\r\n          }\r\n            <h6>Kirjoita kenttiin uudet tiedot</h6>\r\n              <Form.Group>\r\n             <Form.Label>Päivämäärä:</Form.Label>\r\n                <Form.Control type=\"date\" onChange={(e) => dateHandler(e)}/>\r\n                <Form.Label>Laji:</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Syötä laji\" onChange={(e) => sportHandler(e)}/>\r\n                <Form.Label>Suorituskerrat:</Form.Label>\r\n                <Form.Control type=\"number\"  placeholder=\"Syötä suorituskerrat\" onChange={(e) => timesHandler(e)}/>\r\n                <Form.Label>Paino:</Form.Label>\r\n                <Form.Control type=\"number\"  placeholder=\"Syötä paino\" onChange={(e) => weightHandler(e)}/>\r\n              </Form.Group>\r\n                <br />\r\n                <Button onClick = {sendWorkoutToBeEdited}>Muokkaa</Button><br /><br />\r\n                {editSuccess}\r\n        </>\r\n    )\r\n}\r\nexport default EditWorkout;","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Register.js",["81"],"import React, {useState, useContext} from 'react';\r\nimport {Button, Form, ToggleButton, Alert} from 'react-bootstrap';\r\nimport {register} from '../user/services/user-services';\r\nimport UserContext from '../contexts/UserContext';\r\nimport ErrorContext from '../contexts/ErrorContext';\r\n\r\nconst Register = () => {\r\n  const [firstname, setFirstname] = React.useState('');\r\n  const [lastname, setLastname] = React.useState('');\r\n  const [email, setEmail] = React.useState('');\r\n  const [password, setPassword] = React.useState('');\r\n  const [checked, setChecked] = React.useState(false);\r\n  const [show, setShow] = useState(true); //Virheilmoituksen näyttämiseen\r\n  const errorContext = useContext(ErrorContext);\r\n  const userContext = useContext(UserContext);\r\n\r\n  const firstnameHandler = (e) => {\r\n    e.preventDefault();\r\n    setFirstname(e.target.value);\r\n  };\r\n  const lastnameHandler = (e) => {\r\n    e.preventDefault();\r\n    setLastname(e.target.value);\r\n  };\r\n  const emailHandler = (e) => {\r\n    e.preventDefault();\r\n    setEmail(e.target.value);\r\n  };\r\n  const passwordHandler = (e) => {\r\n    e.preventDefault();\r\n    setPassword(e.target.value);\r\n  };\r\n    \r\n  const registerNewAccount = () => {\r\n    let userType;\r\n    if(checked===true){ //asetetaan userType checkboxin arvon mukaan\r\n      userType=\"professional\";\r\n    } else{\r\n      userType=\"amateur\";\r\n    }\r\n\r\n    let accountObject = {\r\n        firstname: firstname,\r\n        lastname: lastname,\r\n        email: email,\r\n        password: password,\r\n        userType: userType\r\n    };\r\n\r\n    register(accountObject, errorContext.setAppError, userContext.setSuccess); //lähetetään rekisteröitymistiedot eteenpäin\r\n  };\r\n\r\n  const closeErrorMessage = () => { //Kun painetaan rastia virheilmoituksessa, suljetaan virheilmoitus ja poistetaan virhe errorcontextista\r\n    setShow(false);\r\n    errorContext.setAppError(null);\r\n  };\r\n \r\n    return(\r\n        <>\r\n        {errorContext.appError && \r\n          <Alert variant=\"danger\" onClose={() => closeErrorMessage()} dismissible centered>\r\n            <Alert.Heading>Virhe</Alert.Heading>\r\n            <p>\r\n              {errorContext.appError}\r\n            </p>\r\n          </Alert>\r\n          }\r\n          <br />\r\n          <Form.Group>\r\n            <Form.Label>Etunimi:</Form.Label>\r\n            <Form.Control required type=\"text\" placeholder=\"Syötä etunimesi\" onChange={(e) => firstnameHandler(e)}/>\r\n            <Form.Label>Sukunimi:</Form.Label>\r\n            <Form.Control required type=\"text\" placeholder=\"Syötä sukunimesi\" onChange={(e) => lastnameHandler(e)}/>\r\n            <Form.Label>Sähköposti:</Form.Label>\r\n            <Form.Control required type=\"email\" placeholder=\"Syötä sähköpostiosoite\" onChange={(e) => emailHandler(e)}/>\r\n            <Form.Label>Salasana:</Form.Label>\r\n            <Form.Control required type=\"password\" placeholder=\"Syötä salasana\" onChange={(e) => passwordHandler(e)}/>\r\n            <ToggleButton id=\"registerCheckbox\" type=\"checkbox\" checked={checked} value=\"1\" onChange={e => setChecked(e.currentTarget.checked)}><span>Olen ammattilainen</span></ToggleButton>\r\n            <br />\r\n            <Button onClick={registerNewAccount}>Luo tili</Button><br /><br />\r\n          </Form.Group>\r\n          </>\r\n    )\r\n}\r\nexport default Register;","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\AddWorkout.js",["82"],"import React, {useContext, useState} from 'react';\r\nimport {Button, Form, Alert} from 'react-bootstrap';\r\nimport {addWorkout} from '../user/services/user-services';\r\nimport UserContext from '../contexts/UserContext';\r\nimport ErrorContext from '../contexts/ErrorContext';\r\n\r\nconst AddWorkout = () => {\r\n      const userContext = useContext(UserContext);\r\n      const errorContext = useContext(ErrorContext);\r\n      const [date, setDate] = React.useState('');\r\n      const [sport, setSport] = React.useState('');\r\n      const [times, setTimes] = React.useState('');\r\n      const [weight, setWeight] = React.useState('');\r\n      const [show, setShow] = useState(true); //Virheilmoituksen näyttämiseen\r\n      let addSuccess = \"\"; //Alustetaan muuttuja, jotta ilmoitus treenin lisäämisen onnistumisesta pystytään näyttämään\r\n\r\n      const person = userContext.Email; //Haetaan userContextista kirjautuneen henkilön sähköposti ja käyttäjätyyppi treenin lisäystä varten\r\n      const usertype = userContext.UserType;\r\n      const token = userContext.token;\r\n\r\n      const dateHandler = (e) => {\r\n        e.preventDefault();\r\n        setDate(e.target.value);\r\n      };\r\n      const sportHandler = (e) => {\r\n        e.preventDefault();\r\n        setSport(e.target.value);\r\n      };\r\n      const timesHandler = (e) => {\r\n        e.preventDefault();\r\n        setTimes(e.target.value);\r\n      };\r\n      const weightHandler = (e) => {\r\n        e.preventDefault();\r\n        setWeight(e.target.value);\r\n      };\r\n      \r\n    const sendWorkoutToDB = () => {\r\n        let workoutObject = {\r\n            date : date,\r\n            sport : sport,\r\n            times : times,\r\n            weight : weight,\r\n            person : person,\r\n            userType : usertype,\r\n            token: token\r\n        };\r\n        addWorkout(workoutObject, errorContext.setAppError, userContext.setSuccess) //Lähetetään uusi treeni tietokantaan\r\n      };\r\n\r\n      const closeErrorMessage = () => { //Kun painetaan rastia virheilmoituksessa, suljetaan virheilmoitus ja poistetaan virhe errorcontextista\r\n        setShow(false);\r\n        errorContext.setAppError(null);\r\n      };\r\n\r\n      if(userContext.Success===true){\r\n        addSuccess = (\r\n          <Alert variant=\"success\">\r\n            Treenin lisääminen onnistui!\r\n          </Alert>\r\n        );\r\n      }\r\n    return(\r\n        <>\r\n        {errorContext.appError && \r\n        <Alert variant=\"danger\" onClose={() => closeErrorMessage()} dismissible>\r\n        <Alert.Heading>Virhe</Alert.Heading>\r\n        <p>\r\n          {errorContext.appError}\r\n        </p>\r\n      </Alert>\r\n        }\r\n            <Form>\r\n                <h6>Kirjoita treenin tiedot alla oleviin kenttiin</h6>\r\n                <Form.Label>Päivämäärä:</Form.Label>\r\n                <Form.Control type=\"date\" onChange={(e) => dateHandler(e)} />\r\n                <Form.Label>Laji:</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Syötä laji\" onChange={(e) => sportHandler(e)} />\r\n                <Form.Label>Suorituskerrat:</Form.Label>\r\n                <Form.Control type=\"number\" placeholder=\"Syötä suorituskerrat\" onChange={(e) => timesHandler(e)} />\r\n                <Form.Label>Paino:</Form.Label>\r\n                <Form.Control type=\"number\" placeholder=\"Syötä paino\" onChange={(e) => weightHandler(e)} />\r\n                <br />\r\n                <Button onClick = {sendWorkoutToDB}>Lisää</Button><br /><br />\r\n                {addSuccess}\r\n            </Form>\r\n            \r\n        </>\r\n    )\r\n}\r\nexport default AddWorkout;","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\user\\services\\user-services.js",["83"],"import axios from 'axios';\r\nconst baseUrlUsers = 'http://localhost:5000/api/users';\r\nconst baseUrlResults = 'http://localhost:5000/api/results';\r\n\r\nconst addWorkout = async (workoutObject, setAppError, setSuccess) => { //Uuden treenin lisääminen\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/' + workoutObject.person + '/',\r\n        headers: {Authorization: 'Bearer ' + workoutObject.token},\r\n        data: workoutObject\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        setSuccess(true);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin lisäämisessä, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst deleteWorkout = async (workoutObject, setAppError) => { //Treenin poistaminen\r\n    const config = {\r\n        method: 'delete',\r\n        url: baseUrlResults + '/' + workoutObject.option + '/',\r\n        headers: {Authorization: 'Bearer ' + workoutObject.token},\r\n        data: workoutObject\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin poistamisessa, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst editWorkout = async (workoutObject, setAppError, setSuccess) => { //Treenin muokkaaminen\r\n    const config = {\r\n        method: 'patch',\r\n        url: baseUrlResults + '/' + workoutObject + '/',\r\n        headers: {Authorization: 'Bearer ' + workoutObject.token},\r\n        data: workoutObject\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        setAppError(null);\r\n        setSuccess(true);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe treenin muokkaamisessa, yritä uudelleen!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst getProfessionalsResults = async (token, setAppError) => { //Haetaan ammattilaisten treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/professionals/',\r\n        headers: {Authorization: 'Bearer ' + token}\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe tietojen haussa, yritä uudelleen myöhemmin!\");\r\n        return;\r\n    };\r\n};\r\n\r\nconst getResultsByUser = async (workoutObject) => { //Haetaan kirjautuneen käyttäjän treenit\r\n    const config = {\r\n        method: 'post',\r\n        url: baseUrlResults + '/own-results/' + workoutObject.email + '/',\r\n        headers: {Authorization: 'Bearer ' + workoutObject.token},\r\n        data: workoutObject\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        console.log(\"User has no excercises yet\");\r\n        return;\r\n    };\r\n}\r\n\r\nconst getAmateursResults = async (setAppError) => { //Haetaan harrastajien treenit\r\n    const config = {\r\n        method: 'get',\r\n        url: baseUrlResults + '/amateurs/',\r\n        headers: {}\r\n    };\r\n    try {\r\n        let res = await axios(config);\r\n        return res.data;\r\n    } catch (error){\r\n        setAppError(\"Virhe tietojen haussa, yritä uudelleen myöhemmin!\");\r\n        return;\r\n    };\r\n};\r\n\r\n\r\nconst register = async (newObject, setAppError, setSuccess) =>{ //Rekisteröidytään\r\n    await axios.post(`${baseUrlUsers}/register/`, newObject)\r\n    .then(response => {\r\n        setSuccess(true);\r\n        return response;\r\n    })\r\n    .catch (error => {\r\n            setAppError(\"Rekisteröityminen epäonnistui, yritä uudelleen!\");\r\n            return \"virhe\";\r\n    })\r\n}\r\n\r\nconst login = async (newObject, setAppError, login) => { //Kirjaudutaan sisään\r\n    let res = await axios.post (`${baseUrlUsers}/login/`, newObject)\r\n    .then(response =>{\r\n        console.log(response);\r\n        login(response.data.token, response.data.email, response.data.firstname, response.data.userType);\r\n    })\r\n    .catch (error => {\r\n        setAppError(\"Sisäänkirjautuminen epäonnistui, yritä uudelleen!\");\r\n        return \"virhe\";\r\n    })\r\n}\r\n\r\nconst logout = (logout) => { //Kirjaudutaan ulos\r\n    logout();\r\n}\r\n\r\nexport {getAmateursResults, getProfessionalsResults, addWorkout, deleteWorkout, editWorkout, register, login, logout, getResultsByUser}\r\n","C:\\Users\\konek\\Documents\\GitHub\\Exercise-diary\\frontend\\src\\components\\Footer.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":16,"column":12,"nodeType":"90","messageId":"91","endLine":16,"endColumn":16},{"ruleId":"92","severity":1,"message":"93","line":29,"column":8,"nodeType":"94","endLine":29,"endColumn":10,"suggestions":"95"},{"ruleId":"88","severity":1,"message":"89","line":13,"column":10,"nodeType":"90","messageId":"91","endLine":13,"endColumn":14},{"ruleId":"88","severity":1,"message":"89","line":9,"column":12,"nodeType":"90","messageId":"91","endLine":9,"endColumn":16},{"ruleId":"92","severity":1,"message":"96","line":13,"column":8,"nodeType":"94","endLine":13,"endColumn":10,"suggestions":"97"},{"ruleId":"88","severity":1,"message":"89","line":11,"column":12,"nodeType":"90","messageId":"91","endLine":11,"endColumn":16},{"ruleId":"92","severity":1,"message":"98","line":15,"column":8,"nodeType":"94","endLine":15,"endColumn":10,"suggestions":"99"},{"ruleId":"88","severity":1,"message":"89","line":14,"column":10,"nodeType":"90","messageId":"91","endLine":14,"endColumn":14},{"ruleId":"88","severity":1,"message":"89","line":13,"column":10,"nodeType":"90","messageId":"91","endLine":13,"endColumn":14},{"ruleId":"88","severity":1,"message":"89","line":14,"column":14,"nodeType":"90","messageId":"91","endLine":14,"endColumn":18},{"ruleId":"88","severity":1,"message":"100","line":116,"column":9,"nodeType":"90","messageId":"91","endLine":116,"endColumn":12},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'show' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'workouts'. Either include it or remove the dependency array.","ArrayExpression",["103"],"React Hook useEffect has a missing dependency: 'errorContext.setAppError'. Either include it or remove the dependency array.",["104"],"React Hook useEffect has missing dependencies: 'errorContext.setAppError' and 'userContext.token'. Either include them or remove the dependency array.",["105"],"'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [workouts]",{"range":"112","text":"113"},"Update the dependencies array to be: [errorContext.setAppError]",{"range":"114","text":"115"},"Update the dependencies array to be: [errorContext.setAppError, userContext.token]",{"range":"116","text":"117"},[1483,1485],"[workouts]",[590,592],"[errorContext.setAppError]",[723,725],"[errorContext.setAppError, userContext.token]"]